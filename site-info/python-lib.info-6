This is python-lib.info, produced by makeinfo version 4.3 from
python-lib.texi.

October 3, 2003


File: python-lib.info,  Node: types,  Next: UserDict,  Prev: atexit,  Up: Python Runtime Services

Names for built-in types
========================

Names for built-in types.

This module defines names for some object types that are used by the
standard Python interpreter, but not for the types defined by various
extension modules.  Also, it does not include some of the types that
arise during processing such the `listiterator' type.  It is safe to
use `from types import *' -- the module does not export any names
besides the ones listed here.  New names exported by future versions of
this module will all end in `Type'.

Typical use is for functions that do different things depending on
their argument types, like the following:

     from types import *
     def delete(mylist, item):
         if type(item) is IntType:
            del mylist[item]
         else:
            mylist.remove(item)

Starting in Python 2.2, built-in factory functions such as `int()' and
`str()' are also names for the corresponding types.  This is now the
preferred way to access the type instead of using the `types' module.
Accordingly, the example above should be written as follows:

     def delete(mylist, item):
         if isinstance(item, int):
            del mylist[item]
         else:
            mylist.remove(item)

The module defines the following names:

`NoneType'
     The type of `None'.

`TypeType'
     The type of type objects (such as returned by `type()' ).

`BooleanType'
     The type of the `bool' values `True' and `False'; this is an alias
     of the built-in `bool()' function.  _Added in Python version 2.3_

`IntType'
     The type of integers (e.g. `1').

`LongType'
     The type of long integers (e.g. `1L').

`FloatType'
     The type of floating point numbers (e.g. `1.0').

`ComplexType'
     The type of complex numbers (e.g. `1.0j').  This is not defined if
     Python was built without complex number support.

`StringType'
     The type of character strings (e.g. `'Spam'').

`UnicodeType'
     The type of Unicode character strings (e.g. `u'Spam'').  This is
     not defined if Python was built without Unicode support.

`TupleType'
     The type of tuples (e.g. `(1, 2, 3, 'Spam')').

`ListType'
     The type of lists (e.g. `[0, 1, 2, 3]').

`DictType'
     The type of dictionaries (e.g. `{'Bacon': 1, 'Ham': 0}').

`DictionaryType'
     An alternate name for `DictType'.

`FunctionType'
     The type of user-defined functions and lambdas.

`LambdaType'
     An alternate name for `FunctionType'.

`GeneratorType'
     The type of generator-iterator objects, produced by calling a
     generator function.  _Added in Python version 2.2_

`CodeType'
     The type for code objects such as returned by `compile()' .

`ClassType'
     The type of user-defined classes.

`InstanceType'
     The type of instances of user-defined classes.

`MethodType'
     The type of methods of user-defined class instances.

`UnboundMethodType'
     An alternate name for `MethodType'.

`BuiltinFunctionType'
     The type of built-in functions like `len()' or `sys.exit()'.

`BuiltinMethodType'
     An alternate name for `BuiltinFunction'.

`ModuleType'
     The type of modules.

`FileType'
     The type of open file objects such as `sys.stdout'.

`XRangeType'
     The type of range objects returned by `xrange()' .

`SliceType'
     The type of objects returned by `slice()' .

`EllipsisType'
     The type of `Ellipsis'.

`TracebackType'
     The type of traceback objects such as found in `sys.exc_traceback'.

`FrameType'
     The type of frame objects such as found in `tb.tb_frame' if `tb'
     is a traceback object.

`BufferType'
     The type of buffer objects created by the `buffer()'  function.

`StringTypes'
     A sequence containing `StringType' and `UnicodeType' used to
     facilitate easier checking for any string object.  Using this is
     more portable than using a sequence of the two string types
     constructed elsewhere since it only contains `UnicodeType' if it
     has been built in the running version of Python.  For example:
     `isinstance(s, types.StringTypes)'.  _Added in Python version 2.2_


File: python-lib.info,  Node: UserDict,  Next: UserList,  Prev: types,  Up: Python Runtime Services

Class wrapper for dictionary objects
====================================

Class wrapper for dictionary objects.

_Note:_ This module is available for backward compatibility only.  If
you are writing code that does not need to work with versions of Python
earlier than Python 2.2, please consider subclassing directly from the
built-in `dict' type.

This module defines a class that acts as a wrapper around dictionary
objects.  It is a useful base class for your own dictionary-like
classes, which can inherit from them and override existing methods or
add new ones.  In this way one can add new behaviors to dictionaries.

The module also defines a mixin defining all dictionary methods for
classes that already have a minimum mapping interface.  This greatly
simplifies writing classes that need to be substitutable for
dictionaries (such as the shelve module).

The `UserDict' module defines the `UserDict' class and `DictMixin':

`UserDict([initialdata])'
     Class that simulates a dictionary.  The instance's contents are
     kept in a regular dictionary, which is accessible via the `data'
     attribute of `UserDict' instances.  If INITIALDATA is provided,
     `data' is initialized with its contents; note that a reference to
     INITIALDATA will not be kept, allowing it be used for other
     purposes.

In addition to supporting the methods and operations of mappings (see
section *Note Mapping Types::), `UserDict' instances provide the
following attribute:

`data'
     A real dictionary used to store the contents of the `UserDict'
     class.

`DictMixin()'
     Mixin defining all dictionary methods for classes that already have
     a minimum dictionary interface including `__getitem__()',
     `__setitem__()', `__delitem__()', and `keys()'.

     This mixin should be used as a superclass.  Adding each of the
     above methods adds progressively more functionality.  For instance,
     defining all but `__delitem__' will preclude only `pop' and
     `popitem' from the full interface.

     In addition to the four base methods, progessively more efficiency
     comes with defining `__contains__()', `__iter__()', and
     `iteritems()'.

     Since the mixin has no knowledge of the subclass constructor, it
     does not define `__init__()' or `copy()'.


File: python-lib.info,  Node: UserList,  Next: UserString,  Prev: UserDict,  Up: Python Runtime Services

Class wrapper for list objects
==============================

Class wrapper for list objects.

_Note:_ This module is available for backward compatibility only.  If
you are writing code that does not need to work with versions of Python
earlier than Python 2.2, please consider subclassing directly from the
built-in `list' type.

This module defines a class that acts as a wrapper around list objects.
It is a useful base class for your own list-like classes, which can
inherit from them and override existing methods or add new ones.  In
this way one can add new behaviors to lists.

The `UserList' module defines the `UserList' class:

`UserList([list])'
     Class that simulates a list.  The instance's contents are kept in
     a regular list, which is accessible via the `data' attribute of
     `UserList' instances.  The instance's contents are initially set
     to a copy of LIST, defaulting to the empty list `[]'.  LIST can be
     either a regular Python list, or an instance of `UserList' (or a
     subclass).

In addition to supporting the methods and operations of mutable
sequences (see section *Note Sequence Types::), `UserList' instances
provide the following attribute:

`data'
     A real Python list object used to store the contents of the
     `UserList' class.

*Subclassing requirements:* Subclasses of `UserList' are expect to
offer a constructor which can be called with either no arguments or one
argument.  List operations which return a new sequence attempt to
create an instance of the actual implementation class.  To do so, it
assumes that the constructor can be called with a single parameter,
which is a sequence object used as a data source.

If a derived class does not wish to comply with this requirement, all
of the special methods supported by this class will need to be
overridden; please consult the sources for information about the
methods which need to be provided in that case.

_Changed in Python version 2.0_


File: python-lib.info,  Node: UserString,  Next: operator,  Prev: UserList,  Up: Python Runtime Services

Class wrapper for string objects
================================

Class wrapper for string objects.

_Note:_ This `UserString' class from this module is available for
backward compatibility only.  If you are writing code that does not
need to work with versions of Python earlier than Python 2.2, please
consider subclassing directly from the built-in `str' type instead of
using `UserString' (there is no built-in equivalent to `MutableString').

This module defines a class that acts as a wrapper around string
objects.  It is a useful base class for your own string-like classes,
which can inherit from them and override existing methods or add new
ones.  In this way one can add new behaviors to strings.

It should be noted that these classes are highly inefficient compared
to real string or Unicode objects; this is especially the case for
`MutableString'.

The `UserString' module defines the following classes:

`UserString([sequence])'
     Class that simulates a string or a Unicode string object.  The
     instance's content is kept in a regular string or Unicode string
     object, which is accessible via the `data' attribute of
     `UserString' instances.  The instance's contents are initially set
     to a copy of SEQUENCE.  SEQUENCE can be either a regular Python
     string or Unicode string, an instance of `UserString' (or a
     subclass) or an arbitrary sequence which can be converted into a
     string using the built-in `str()' function.

`MutableString([sequence])'
     This class is derived from the `UserString' above and redefines
     strings to be _mutable_.  Mutable strings can't be used as
     dictionary keys, because dictionaries require _immutable_ objects
     as keys.  The main intention of this class is to serve as an
     educational example for inheritance and necessity to remove
     (override) the `__hash__()' method in order to trap attempts to
     use a mutable object as dictionary key, which would be otherwise
     very error prone and hard to track down.

In addition to supporting the methods and operations of string and
Unicode objects (see section *Note String Methods::, "String Methods"),
`UserString' instances provide the following attribute:

`data'
     A real Python string or Unicode object used to store the content
     of the `UserString' class.


File: python-lib.info,  Node: operator,  Next: inspect,  Prev: UserString,  Up: Python Runtime Services

Standard operators as functions.
================================

All Python's standard operators as built-in functions.

The `operator' module exports a set of functions implemented in C
corresponding to the intrinsic operators of Python.  For example,
`operator.add(x, y)' is equivalent to the expression `x+y'.  The
function names are those used for special class methods; variants
without leading and trailing `__' are also provided for convenience.

The functions fall into categories that perform object comparisons,
logical operations, mathematical operations, sequence operations, and
abstract type tests.

The object comparison functions are useful for all objects, and are
named after the rich comparison operators they support:

`lt(a, b)'

`le a, b'

`eq a, b'

`ne a, b'

`ge a, b'

`gt a, b'

`__lt__ a, b'

`__le__ a, b'

`__eq__ a, b'

`__ne__ a, b'

`__ge__ a, b'

`__gt__ a, b'
     Perform "rich comparisons" between A and B. Specifically, `lt(A,
     B)' is equivalent to `A < B', `le(A, B)' is equivalent to `A <= B',
     `eq(A, B)' is equivalent to `A == B', `ne(A, B)' is equivalent to
     `A != B', `gt(A, B)' is equivalent to `A > B' and `ge(A, B)' is
     equivalent to `A >= B'.  Note that unlike the built-in `cmp()',
     these functions can return any value, which may or may not be
     interpretable as a Boolean value.  See the for more informations
     about rich comparisons.  _Added in Python version 2.2_

The logical operations are also generally applicable to all objects,
and support truth tests, identity tests, and boolean operations:

`not_(o)'

`__not__ o'
     Return the outcome of `not' O.  (Note that there is no `__not__()'
     method for object instances; only the interpreter core defines
     this operation.  The result is affected by the `__nonzero__()' and
     `__len__()' methods.)

`truth(o)'
     Return `True' if O is true, and `False' otherwise.  This is
     equivalent to using the `bool' constructor.

`is_(a, b)'
     Return `A is B'.  Tests object identity.

`is_not(a, b)'
     Return `A is not B'.  Tests object identity.

The mathematical and bitwise operations are the most numerous:

`abs(o)'

`__abs__ o'
     Return the absolute value of O.

`add(a, b)'

`__add__ a, b'
     Return A `+' B, for A and B numbers.

`and_(a, b)'

`__and__ a, b'
     Return the bitwise and of A and B.

`div(a, b)'

`__div__ a, b'
     Return A `/' B when `__future__.division' is not in effect.  This
     is also known as "classic" division.

`floordiv(a, b)'

`__floordiv__ a, b'
     Return A `//' B.  _Added in Python version 2.2_

`inv(o)'

`invert o'

`__inv__ o'

`__invert__ o'
     Return the bitwise inverse of the number O.  This is equivalent to
     `~'O.  The names `invert()' and `__invert__()' were added in
     Python 2.0.

`lshift(a, b)'

`__lshift__ a, b'
     Return A shifted left by B.

`mod(a, b)'

`__mod__ a, b'
     Return A `%' B.

`mul(a, b)'

`__mul__ a, b'
     Return A `*' B, for A and B numbers.

`neg(o)'

`__neg__ o'
     Return O negated.

`or_(a, b)'

`__or__ a, b'
     Return the bitwise or of A and B.

`pos(o)'

`__pos__ o'
     Return O positive.

`pow(a, b)'

`__pow__ a, b'
     Return A `**' B, for A and B numbers.  _Added in Python version
     2.3_

`rshift(a, b)'

`__rshift__ a, b'
     Return A shifted right by B.

`sub(a, b)'

`__sub__ a, b'
     Return A `-' B.

`truediv(a, b)'

`__truediv__ a, b'
     Return A `/' B when `__future__.division' is in effect.  This is
     also known as division.  _Added in Python version 2.2_

`xor(a, b)'

`__xor__ a, b'
     Return the bitwise exclusive or of A and B.

Operations which work with sequences include:

`concat(a, b)'

`__concat__ a, b'
     Return A `+' B for A and B sequences.

`contains(a, b)'

`__contains__ a, b'
     Return the outcome of the test B `in' A.  Note the reversed
     operands.  The name `__contains__()' was added in Python 2.0.

`countOf(a, b)'
     Return the number of occurrences of B in A.

`delitem(a, b)'

`__delitem__ a, b'
     Remove the value of A at index B.

`delslice(a, b, c)'

`__delslice__ a, b, c'
     Delete the slice of A from index B to index C`-1'.

`getitem(a, b)'

`__getitem__ a, b'
     Return the value of A at index B.

`getslice(a, b, c)'

`__getslice__ a, b, c'
     Return the slice of A from index B to index C`-1'.

`indexOf(a, b)'
     Return the index of the first of occurrence of B in A.

`repeat(a, b)'

`__repeat__ a, b'
     Return A `*' B where A is a sequence and B is an integer.

`sequenceIncludes(...)'
     _This is deprecated in Python 2.0.  Use `contains()' instead._
     Alias for `contains()'.

`setitem(a, b, c)'

`__setitem__ a, b, c'
     Set the value of A at index B to C.

`setslice(a, b, c, v)'

`__setslice__ a, b, c, v'
     Set the slice of A from index B to index C`-1' to the sequence V.

The `operator' module also defines a few predicates to test the type of
objects.  _Note:_ Be careful not to misinterpret the results of these
functions; only `isCallable()' has any measure of reliability with
instance objects.  For example:

     >>> class C:
     ...     pass
     ...
     >>> import operator
     >>> o = C()
     >>> operator.isMappingType(o)
     1

`isCallable(o)'
     _This is deprecated in Python 2.0.  Use the `callable()' built-in
     function instead._ Returns true if the object O can be called like
     a function, otherwise it returns false.  True is returned for
     functions, bound and unbound methods, class objects, and instance
     objects which support the `__call__()' method.

`isMappingType(o)'
     Returns true if the object O supports the mapping interface.  This
     is true for dictionaries and all instance objects.  _There is no
     reliable way to test if an instance supports the complete mapping
     protocol since the interface itself is ill-defined.  This makes
     this test less useful than it otherwise might be._

`isNumberType(o)'
     Returns true if the object O represents a number.  This is true
     for all numeric types implemented in C, and for all instance
     objects.  _There is no reliable way to test if an instance
     supports the complete numeric interface since the interface itself
     is ill-defined.  This makes this test less useful than it
     otherwise might be._

`isSequenceType(o)'
     Returns true if the object O supports the sequence protocol.  This
     returns true for all objects which define sequence methods in C,
     and for all instance objects.  _There is no reliable way to test
     if an instance supports the complete sequence interface since the
     interface itself is ill-defined.  This makes this test less useful
     than it otherwise might be._

Example: Build a dictionary that maps the ordinals from `0' to `256' to
their character equivalents.

     >>> import operator
     >>> d = {}
     >>> keys = range(256)
     >>> vals = map(chr, keys)
     >>> map(operator.setitem, [d]*len(keys), keys, vals)

* Menu:

* Mapping Operators to Functions::


File: python-lib.info,  Node: Mapping Operators to Functions,  Prev: operator,  Up: operator

Mapping Operators to Functions
------------------------------

This table shows how abstract operations correspond to operator symbols
in the Python syntax and the functions in the `operator' module.

Operation                Syntax                   Function
------                   -----                    -----
Addition                 `A + B'                  `add(A, B)'
Concatenation            `SEQ1 + SEQ2'            `concat(SEQ1, SEQ2)'
Containment Test         `O in SEQ'               `contains(SEQ, O)'
Division                 `A / B'                  `div(A, B) #' without
                                                  `__future__.division'
Division                 `A / B'                  `truediv(A, B) #' with
                                                  `__future__.division'
Division                 `A // B'                 `floordiv(A, B)'
Bitwise And              `A & B'                  `and_(A, B)'
Bitwise Exclusive Or     `A ^ B'                  `xor(A, B)'
Bitwise Inversion        `~{} A'                  `invert(A)'
Bitwise Or               `A | B'                  `or_(A, B)'
Exponentiation           `A ** B'                 `pow(A, B)'
Identity                 `A is B'                 `is_(A, B)'
Identity                 `A is not B'             `is_not(A, B)'
Indexed Assignment       `O[K] = V'               `setitem(O, K, V)'
Indexed Deletion         `del O[K]'               `delitem(O, K)'
Indexing                 `O[K]'                   `getitem(O, K)'
Left Shift               `A <`<' B'               `lshift(A, B)'
Modulo                   `A % B'                  `mod(A, B)'
Multiplication           `A * B'                  `mul(A, B)'
Negation (Arithmetic)    `- A'                    `neg(A)'
Negation (Logical)       `not A'                  `not_(A)'
Right Shift              `A >`>' B'               `rshift(A, B)'
Sequence Repitition      `SEQ * I'                `repeat(SEQ, I)'
Slice Assignment         `SEQ[I:J]' = VALUES      `setslice(SEQ, I, J,
                                                  VALUES)'
Slice Deletion           `del SEQ[I:J]'           `delslice(SEQ, I, J)'
Slicing                  `SEQ[I:J]'               `getslice(SEQ, I, J)'
String Formatting        `S % O'                  `mod(S, O)'
Subtraction              `A - B'                  `sub(A, B)'
Truth Test               `O'                      `truth(O)'
Ordering                 `A < B'                  `lt(A, B)'
Ordering                 `A <= B'                 `le(A, B)'
Equality                 `A == B'                 `eq(A, B)'
Difference               `A != B'                 `ne(A, B)'
Ordering                 `A >= B'                 `ge(A, B)'
Ordering                 `A > B'                  `gt(A, B)'


File: python-lib.info,  Node: inspect,  Next: traceback,  Prev: operator,  Up: Python Runtime Services

Inspect live objects
====================

Extract information and source code from live objects.

_Added in Python version 2.1_

The `inspect' module provides several useful functions to help get
information about live objects such as modules, classes, methods,
functions, tracebacks, frame objects, and code objects.  For example,
it can help you examine the contents of a class, retrieve the source
code of a method, extract and format the argument list for a function,
or get all the information you need to display a detailed traceback.

There are four main kinds of services provided by this module: type
checking, getting source code, inspecting classes and functions, and
examining the interpreter stack.

* Menu:

* Types and members::
* Retrieving source code::
* Classes and functions::
* interpreter stack::


File: python-lib.info,  Node: Types and members,  Next: Retrieving source code,  Prev: inspect,  Up: inspect

Types and members
-----------------

The `getmembers()' function retrieves the members of an object such as
a class or module.  The nine functions whose names begin with "is" are
mainly provided as convenient choices for the second argument to
`getmembers()'.  They also help you determine when you can expect to
find the following special attributes:

Type               Attribute          Description        Notes
------             ------             ------             ------
module             __doc__            documentation      
                                      string             
                   __file__           filename (missing  
                                      for built-in       
                                      modules)           
class              __doc__            documentation      
                                      string             
                   __module__         name of module in  
                                      which this class   
                                      was defined        
method             __doc__            documentation      
                                      string             
                   __name__           name with which    
                                      this method was    
                                      defined            
                   im_class           class object that  (1)
                                      asked for this     
                                      method             
                   im_func            function object    
                                      containing         
                                      implementation of  
                                      method             
                   im_self            instance to which  
                                      this method is     
                                      bound, or `None'   
function           __doc__            documentation      
                                      string             
                   __name__           name with which    
                                      this function was  
                                      defined            
                   func_code          code object        
                                      containing         
                                      compiled function  
                                      bytecode           
                   func_defaults      tuple of any       
                                      default values     
                                      for arguments      
                   func_doc           (same as __doc__)  
                   func_globals       global namespace   
                                      in which this      
                                      function was       
                                      defined            
                   func_name          (same as           
                                      __name__)          
traceback          tb_frame           frame object at    
                                      this level         
                   tb_lasti           index of last      
                                      attempted          
                                      instruction in     
                                      bytecode           
                   tb_lineno          current line       
                                      number in Python   
                                      source code        
                   tb_next            next inner         
                                      traceback object   
                                      (called by this    
                                      level)             
frame              f_back             next outer frame   
                                      object (this       
                                      frame's caller)    
                   f_builtins         built-in           
                                      namespace seen by  
                                      this frame         
                   f_code             code object being  
                                      executed in this   
                                      frame              
                   f_exc_traceback    traceback if       
                                      raised in this     
                                      frame, or `None'   
                   f_exc_type         exception type if  
                                      raised in this     
                                      frame, or `None'   
                   f_exc_value        exception value    
                                      if raised in this  
                                      frame, or `None'   
                   f_globals          global namespace   
                                      seen by this       
                                      frame              
                   f_lasti            index of last      
                                      attempted          
                                      instruction in     
                                      bytecode           
                   f_lineno           current line       
                                      number in Python   
                                      source code        
                   f_locals           local namespace    
                                      seen by this       
                                      frame              
                   f_restricted       0 or 1 if frame    
                                      is in restricted   
                                      execution mode     
                   f_trace            tracing function   
                                      for this frame,    
                                      or `None'          
code               co_argcount        number of          
                                      arguments (not     
                                      including * or **  
                                      args)              
                   co_code            string of raw      
                                      compiled bytecode  
                   co_consts          tuple of           
                                      constants used in  
                                      the bytecode       
                   co_filename        name of file in    
                                      which this code    
                                      object was         
                                      created            
                   co_firstlineno     number of first    
                                      line in Python     
                                      source code        
                   co_flags           bitmap:            
                                      1=optimized `|'    
                                      2=newlocals `|'    
                                      4=*arg `|'         
                                      8=**arg            
                   co_lnotab          encoded mapping    
                                      of line numbers    
                                      to bytecode        
                                      indices            
                   co_name            name with which    
                                      this code object   
                                      was defined        
                   co_names           tuple of names of  
                                      local variables    
                   co_nlocals         number of local    
                                      variables          
                   co_stacksize       virtual machine    
                                      stack space        
                                      required           
                   co_varnames        tuple of names of  
                                      arguments and      
                                      local variables    
builtin            __doc__            documentation      
                                      string             
                   __name__           original name of   
                                      this function or   
                                      method             
                   __self__           instance to which  
                                      a method is        
                                      bound, or `None'   

Note:
`(1)'
     _Changed in Python version 2.2_

`getmembers(object[, predicate])'
     Return all the members of an object in a list of (name, value)
     pairs sorted by name.  If the optional PREDICATE argument is
     supplied, only members for which the predicate returns a true
     value are included.

`getmoduleinfo(path)'
     Return a tuple of values that describe how Python will interpret
     the file identified by PATH if it is a module, or `None' if it
     would not be identified as a module.  The return tuple is `(NAME,
     SUFFIX, MODE, MTYPE)', where NAME is the name of the module
     without the name of any enclosing package, SUFFIX is the trailing
     part of the file name (which may not be a dot-delimited
     extension), MODE is the `open()' mode that would be used (`'r'' or
     `'rb''), and MTYPE is an integer giving the type of the module.
     MTYPE will have a value which can be compared to the constants
     defined in the `imp' module; see the documentation for that module
     for more information on module types.

`getmodulename(path)'
     Return the name of the module named by the file PATH, without
     including the names of enclosing packages.  This uses the same
     algortihm as the interpreter uses when searching for modules.  If
     the name cannot be matched according to the interpreter's rules,
     `None' is returned.

`ismodule(object)'
     Return true if the object is a module.

`isclass(object)'
     Return true if the object is a class.

`ismethod(object)'
     Return true if the object is a method.

`isfunction(object)'
     Return true if the object is a Python function or unnamed (lambda)
     function.

`istraceback(object)'
     Return true if the object is a traceback.

`isframe(object)'
     Return true if the object is a frame.

`iscode(object)'
     Return true if the object is a code.

`isbuiltin(object)'
     Return true if the object is a built-in function.

`isroutine(object)'
     Return true if the object is a user-defined or built-in function
     or method.

`ismethoddescriptor(object)'
     Return true if the object is a method descriptor, but not if
     ismethod() or isclass() or isfunction() are true.

     This is new as of Python 2.2, and, for example, is true of
     int.__add__.  An object passing this test has a __get__ attribute
     but not a __set__ attribute, but beyond that the set of attributes
     varies.  __name__ is usually sensible, and __doc__ often is.

     Methods implemented via descriptors that also pass one of the other
     tests return false from the ismethoddescriptor() test, simply
     because the other tests promise more - you can, e.g., count on
     having the im_func attribute (etc) when an object passes
     ismethod().

`isdatadescriptor(object)'
     Return true if the object is a data descriptor.

     Data descriptors have both a __get__ and a __set__ attribute.
     Examples are properties (defined in Python) and getsets and
     members (defined in C).  Typically, data descriptors will also
     have __name__ and __doc__ attributes (properties, getsets, and
     members have both of these attributes), but this is not guaranteed.
     _Added in Python version 2.3_


File: python-lib.info,  Node: Retrieving source code,  Next: Classes and functions,  Prev: Types and members,  Up: inspect

Retrieving source code
----------------------

`getdoc(object)'
     Get the documentation string for an object.  All tabs are expanded
     to spaces.  To clean up docstrings that are indented to line up
     with blocks of code, any whitespace than can be uniformly removed
     from the second line onwards is removed.

`getcomments(object)'
     Return in a single string any lines of comments immediately
     preceding the object's source code (for a class, function, or
     method), or at the top of the Python source file (if the object is
     a module).

`getfile(object)'
     Return the name of the (text or binary) file in which an object was
     defined.  This will fail with a `TypeError' if the object is a
     built-in module, class, or function.

`getmodule(object)'
     Try to guess which module an object was defined in.

`getsourcefile(object)'
     Return the name of the Python source file in which an object was
     defined.  This will fail with a `TypeError' if the object is a
     built-in module, class, or function.

`getsourcelines(object)'
     Return a list of source lines and starting line number for an
     object.  The argument may be a module, class, method, function,
     traceback, frame, or code object.  The source code is returned as
     a list of the lines corresponding to the object and the line
     number indicates where in the original source file the first line
     of code was found.  An `IOError' is raised if the source code
     cannot be retrieved.

`getsource(object)'
     Return the text of the source code for an object.  The argument
     may be a module, class, method, function, traceback, frame, or
     code object.  The source code is returned as a single string.  An
     `IOError' is raised if the source code cannot be retrieved.


File: python-lib.info,  Node: Classes and functions,  Next: interpreter stack,  Prev: Retrieving source code,  Up: inspect

Classes and functions
---------------------

`getclasstree(classes[, unique])'
     Arrange the given list of classes into a hierarchy of nested lists.
     Where a nested list appears, it contains classes derived from the
     class whose entry immediately precedes the list.  Each entry is a
     2-tuple containing a class and a tuple of its base classes.  If
     the UNIQUE argument is true, exactly one entry appears in the
     returned structure for each class in the given list.  Otherwise,
     classes using multiple inheritance and their descendants will
     appear multiple times.

`getargspec(func)'
     Get the names and default values of a function's arguments.  A
     tuple of four things is returned: `(ARGS, VARARGS, VARKW,
     DEFAULTS)'.  ARGS is a list of the argument names (it may contain
     nested lists).  VARARGS and VARKW are the names of the `*' and
     `**' arguments or `None'.  DEFAULTS is a tuple of default argument
     values; if this tuple has N elements, they correspond to the last
     N elements listed in ARGS.

`getargvalues(frame)'
     Get information about arguments passed into a particular frame.  A
     tuple of four things is returned: `(ARGS, VARARGS, VARKW, LOCALS)'.
     ARGS is a list of the argument names (it may contain nested lists).
     VARARGS and VARKW are the names of the `*' and `**' arguments or
     `None'.  LOCALS is the locals dictionary of the given frame.

`formatargspec(args[, varargs, varkw, defaults, argformat, varargsformat, varkwformat, defaultformat])'
     Format a pretty argument spec from the four values returned by
     `getargspec()'.  The other four arguments are the corresponding
     optional formatting functions that are called to turn names and
     values into strings.

`formatargvalues(args[, varargs, varkw, locals, argformat, varargsformat, varkwformat, valueformat])'
     Format a pretty argument spec from the four values returned by
     `getargvalues()'.  The other four arguments are the corresponding
     optional formatting functions that are called to turn names and
     values into strings.

`getmro(cls)'
     Return a tuple of class cls's base classes, including cls, in
     method resolution order.  No class appears more than once in this
     tuple.  Note that the method resolution order depends on cls's
     type.  Unless a very peculiar user-defined metatype is in use, cls
     will be the first element of the tuple.


File: python-lib.info,  Node: interpreter stack,  Prev: Classes and functions,  Up: inspect

The interpreter stack
---------------------

When the following functions return "frame records," each record is a
tuple of six items: the frame object, the filename, the line number of
the current line, the function name, a list of lines of context from
the source code, and the index of the current line within that list.
The optional CONTEXT argument specifies the number of lines of context
to return, which are centered around the current line.

_Keeping references to frame objects, as found in the first element of
the frame records these functions return, can cause your program to
create reference cycles.  Once a reference cycle has been created, the
lifespan of all objects which can be accessed from the objects which
form the cycle can become much longer even if Python's optional cycle
detector is enabled.  If such cycles must be created, it is important
to ensure they are explicitly broken to avoid the delayed destruction
of objects and increased memory consumption which occurs._

`getframeinfo(frame[, context])'
     Get information about a frame or traceback object.  A 5-tuple is
     returned, the last five elements of the frame's frame record.  The
     optional second argument specifies the number of lines of context
     to return, which are centered around the current line.

`getouterframes(frame[, context])'
     Get a list of frame records for a frame and all higher (calling)
     frames.

`getinnerframes(traceback[, context])'
     Get a list of frame records for a traceback's frame and all lower
     frames.

`currentframe()'
     Return the frame object for the caller's stack frame.

`stack([context])'
     Return a list of frame records for the stack above the caller's
     frame.

`trace([context])'
     Return a list of frame records for the stack below the current
     exception.

Stackframes stored directly or indirectly in local variables can easily
cause reference cycles.  Though the cycle detector will catch these,
destruction of the frames (and local variables) can be made
deterministic by removing the cycle in a `finally' clause.  This is
also important if the cycle detector was disabled when Python was
compiled or using `gc.disable()'.  For example:

     def handle_stackframe_without_leak():
         frame = inspect.currentframe()
         try:
             # do something with the frame
         finally:
             del frame


File: python-lib.info,  Node: traceback,  Next: linecache,  Prev: inspect,  Up: Python Runtime Services

Print or retrieve a stack traceback
===================================

Print or retrieve a stack traceback.

This module provides a standard interface to extract, format and print
stack traces of Python programs.  It exactly mimics the behavior of the
Python interpreter when it prints a stack trace.  This is useful when
you want to print stack traces under program control, such as in a
"wrapper" around the interpreter.

The module uses traceback objects -- this is the object type that is
stored in the variables `sys.exc_traceback' (deprecated) and
`sys.last_traceback' and returned as the third item from
`sys.exc_info()'.

The module defines the following functions:

`print_tb(traceback[, limit[, file]])'
     Print up to LIMIT stack trace entries from TRACEBACK.  If LIMIT is
     omitted or `None', all entries are printed.  If FILE is omitted or
     `None', the output goes to `sys.stderr'; otherwise it should be an
     open file or file-like object to receive the output.

`print_exception(type, value, traceback[, limit[, file]])'
     Print exception information and up to LIMIT stack trace entries
     from TRACEBACK to FILE.  This differs from `print_tb()' in the
     following ways: (1) if TRACEBACK is not `None', it prints a header
     `Traceback (most recent call last):'; (2) it prints the exception
     TYPE and VALUE after the stack trace; (3) if TYPE is `SyntaxError'
     and VALUE has the appropriate format, it prints the line where the
     syntax error occurred with a caret indicating the approximate
     position of the error.

`print_exc([limit[, file]])'
     This is a shorthand for `print_exception(sys.exc_type,
     sys.exc_value, sys.exc_traceback, LIMIT, FILE)'.  (In fact, it
     uses `sys.exc_info()' to retrieve the same information in a
     thread-safe way instead of using the deprecated variables.)

`print_last([limit[, file]])'
     This is a shorthand for `print_exception(sys.last_type,
     sys.last_value, sys.last_traceback, LIMIT, FILE)'.

`print_stack([f[, limit[, file]]])'
     This function prints a stack trace from its invocation point.  The
     optional F argument can be used to specify an alternate stack
     frame to start.  The optional LIMIT and FILE arguments have the
     same meaning as for `print_exception()'.

`extract_tb(traceback[, limit])'
     Return a list of up to LIMIT "pre-processed" stack trace entries
     extracted from the traceback object TRACEBACK.  It is useful for
     alternate formatting of stack traces.  If LIMIT is omitted or
     `None', all entries are extracted.  A "pre-processed" stack trace
     entry is a quadruple (FILENAME, LINE NUMBER, FUNCTION NAME, TEXT)
     representing the information that is usually printed for a stack
     trace.  The TEXT is a string with leading and trailing whitespace
     stripped; if the source is not available it is `None'.

`extract_stack([f[, limit]])'
     Extract the raw traceback from the current stack frame.  The return
     value has the same format as for `extract_tb()'.  The optional F
     and LIMIT arguments have the same meaning as for `print_stack()'.

`format_list(list)'
     Given a list of tuples as returned by `extract_tb()' or
     `extract_stack()', return a list of strings ready for printing.
     Each string in the resulting list corresponds to the item with the
     same index in the argument list.  Each string ends in a newline;
     the strings may contain internal newlines as well, for those items
     whose source text line is not `None'.

`format_exception_only(type, value)'
     Format the exception part of a traceback.  The arguments are the
     exception type and value such as given by `sys.last_type' and
     `sys.last_value'.  The return value is a list of strings, each
     ending in a newline.  Normally, the list contains a single string;
     however, for `SyntaxError' exceptions, it contains several lines
     that (when printed) display detailed information about where the
     syntax error occurred.  The message indicating which exception
     occurred is the always last string in the list.

`format_exception(type, value, tb[, limit])'
     Format a stack trace and the exception information.  The arguments
     have the same meaning as the corresponding arguments to
     `print_exception()'.  The return value is a list of strings, each
     ending in a newline and some containing internal newlines.  When
     these lines are concatenated and printed, exactly the same text is
     printed as does `print_exception()'.

`format_tb(tb[, limit])'
     A shorthand for `format_list(extract_tb(TB, LIMIT))'.

`format_stack([f[, limit]])'
     A shorthand for `format_list(extract_stack(F, LIMIT))'.

`tb_lineno(tb)'
     This function returns the current line number set in the traceback
     object.  This function was necessary because in versions of Python
     prior to 2.3 when the `-O' flag was passed to Python the
     `TB.tb_lineno' was not updated correctly.  This function has no
     use in versions past 2.3.

* Menu:

* Traceback Example::


File: python-lib.info,  Node: Traceback Example,  Prev: traceback,  Up: traceback

Traceback Example
-----------------

This simple example implements a basic read-eval-print loop, similar to
(but less useful than) the standard Python interactive interpreter
loop.  For a more complete implementation of the interpreter loop,
refer to the `code' module.

     import sys, traceback
     
     def run_user_code(envdir):
         source = raw_input(">>> ")
         try:
             exec source in envdir
         except:
             print "Exception in user code:"
             print '-'*60
             traceback.print_exc(file=sys.stdout)
             print '-'*60
     
     envdir = {}
     while 1:
         run_user_code(envdir)


File: python-lib.info,  Node: linecache,  Next: pickle,  Prev: traceback,  Up: Python Runtime Services

Random access to text lines
===========================

This module provides random access to individual lines from text files.

The `linecache' module allows one to get any line from any file, while
attempting to optimize internally, using a cache, the common case where
many lines are read from a single file.  This is used by the
`traceback' module to retrieve source lines for inclusion in the
formatted traceback.

The `linecache' module defines the following functions:

`getline(filename, lineno)'
     Get line LINENO from file named FILENAME. This function will never
     throw an exception -- it will return `''' on errors (the
     terminating newline character will be included for lines that are
     found).

     If a file named FILENAME is not found, the function will look for
     it in the module  search path, `sys.path'.

`clearcache()'
     Clear the cache.  Use this function if you no longer need lines
     from files previously read using `getline()'.

`checkcache()'
     Check the cache for validity.  Use this function if files in the
     cache may have changed on disk, and you require the updated
     version.

Example:

     >>> import linecache
     >>> linecache.getline('/etc/passwd', 4)
     'sys:x:3:3:sys:/dev:/bin/sh\n'


File: python-lib.info,  Node: pickle,  Next: cPickle,  Prev: linecache,  Up: Python Runtime Services

Python object serialization
===========================

Convert Python objects to streams of bytes and back.

The `pickle' module implements a fundamental, but powerful algorithm
for serializing and de-serializing a Python object structure.
"Pickling" is the process whereby a Python object hierarchy is
converted into a byte stream, and "unpickling" is the inverse
operation, whereby a byte stream is converted back into an object
hierarchy.  Pickling (and unpickling) is alternatively known as
"serialization", "marshalling,"(1) or "flattening", however, to avoid
confusion, the terms used here are "pickling" and "unpickling".

This documentation describes both the `pickle' module and the `cPickle'
module.

* Menu:

* Relationship to other Python modules::
* Data stream format::
* Usage::
* What can be pickled and unpickled?::
* pickle protocol::
* Subclassing Unpicklers::
* Example 3::

---------- Footnotes ----------

(1) Don't confuse this with the `marshal' module

