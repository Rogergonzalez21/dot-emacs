This is python-lib.info, produced by makeinfo version 4.3 from
python-lib.texi.

October 3, 2003


File: python-lib.info,  Node: XMLParser Objects,  Next: ExpatError Exceptions,  Prev: xmlparsersexpat,  Up: xmlparsersexpat

XMLParser Objects
-----------------

`xmlparser' objects have the following methods:

`Parse(data[, isfinal])'
     Parses the contents of the string DATA, calling the appropriate
     handler functions to process the parsed data.  ISFINAL must be
     true on the final call to this method.  DATA can be the empty
     string at any time.

`ParseFile(file)'
     Parse XML data reading from the object FILE.  FILE only needs to
     provide the `read(NBYTES)' method, returning the empty string when
     there's no more data.

`SetBase(base)'
     Sets the base to be used for resolving relative URIs in system
     identifiers in declarations.  Resolving relative identifiers is
     left to the application: this value will be passed through as the
     BASE argument to the `ExternalEntityRefHandler',
     `NotationDeclHandler', and `UnparsedEntityDeclHandler' functions.

`GetBase()'
     Returns a string containing the base set by a previous call to
     `SetBase()', or `None' if `SetBase()' hasn't been called.

`GetInputContext()'
     Returns the input data that generated the current event as a
     string.  The data is in the encoding of the entity which contains
     the text.  When called while an event handler is not active, the
     return value is `None'.  _Added in Python version 2.1_

`ExternalEntityParserCreate(context[, encoding])'
     Create a "child" parser which can be used to parse an external
     parsed entity referred to by content parsed by the parent parser.
     The CONTEXT parameter should be the string passed to the
     `ExternalEntityRefHandler()' handler function, described below.
     The child parser is created with the `ordered_attributes',
     `returns_unicode' and `specified_attributes' set to the values of
     this parser.

`xmlparser' objects have the following attributes:

`buffer_size'
     The size of the buffer used when `buffer_text' is true.  This
     value cannot be changed at this time.  _Added in Python version
     2.3_

`buffer_text'
     Setting this to true causes the `xmlparser' object to buffer
     textual content returned by Expat to avoid multiple calls to the
     `CharacterDataHandler()' callback whenever possible.  This can
     improve performance substantially since Expat normally breaks
     character data into chunks at every line ending.  This attribute is
     false by default, and may be changed at any time.  _Added in
     Python version 2.3_

`buffer_used'
     If `buffer_text' is enabled, the number of bytes stored in the
     buffer.  These bytes represent UTF-8 encoded text.  This attribute
     has no meaningful interpretation when `buffer_text' is false.
     _Added in Python version 2.3_

`ordered_attributes'
     Setting this attribute to a non-zero integer causes the attributes
     to be reported as a list rather than a dictionary.  The attributes
     are presented in the order found in the document text.  For each
     attribute, two list entries are presented: the attribute name and
     the attribute value.  (Older versions of this module also used this
     format.)  By default, this attribute is false; it may be changed at
     any time.  _Added in Python version 2.1_

`returns_unicode'
     If this attribute is set to a non-zero integer, the handler
     functions will be passed Unicode strings.  If `returns_unicode' is
     0, 8-bit strings containing UTF-8 encoded data will be passed to
     the handlers.  _Changed in Python version 1.6_

`specified_attributes'
     If set to a non-zero integer, the parser will report only those
     attributes which were specified in the document instance and not
     those which were derived from attribute declarations.
     Applications which set this need to be especially careful to use
     what additional information is available from the declarations as
     needed to comply with the standards for the behavior of XML
     processors.  By default, this attribute is false; it may be
     changed at any time.  _Added in Python version 2.1_

The following attributes contain values relating to the most recent
error encountered by an `xmlparser' object, and will only have correct
values once a call to `Parse()' or `ParseFile()' has raised a
`xml.parsers.expat.ExpatError' exception.

`ErrorByteIndex'
     Byte index at which an error occurred.

`ErrorCode'
     Numeric code specifying the problem.  This value can be passed to
     the `ErrorString()' function, or compared to one of the constants
     defined in the `errors' object.

`ErrorColumnNumber'
     Column number at which an error occurred.

`ErrorLineNumber'
     Line number at which an error occurred.

Here is the list of handlers that can be set.  To set a handler on an
`xmlparser' object O, use `O.HANDLERNAME = FUNC'.  HANDLERNAME must be
taken from the following list, and FUNC must be a callable object
accepting the correct number of arguments.  The arguments are all
strings, unless otherwise stated.

`XmlDeclHandler(version, encoding, standalone)'
     Called when the XML declaration is parsed.  The XML declaration is
     the (optional) declaration of the applicable version of the XML
     recommendation, the encoding of the document text, and an optional
     "standalone" declaration.  VERSION and ENCODING will be strings of
     the type dictated by the `returns_unicode' attribute, and
     STANDALONE will be `1' if the document is declared standalone, `0'
     if it is declared not to be standalone, or `-1' if the standalone
     clause was omitted.  This is only available with Expat version
     1.95.0 or newer.  _Added in Python version 2.1_

`StartDoctypeDeclHandler(doctypeName, systemId, publicId, has_internal_subset)'
     Called when Expat begins parsing the document type declaration
     (`<!DOCTYPE ...').  The DOCTYPENAME is provided exactly as
     presented.  The SYSTEMID and PUBLICID parameters give the system
     and public identifiers if specified, or `None' if omitted.
     HAS_INTERNAL_SUBSET will be true if the document contains and
     internal document declaration subset.  This requires Expat version
     1.2 or newer.

`EndDoctypeDeclHandler()'
     Called when Expat is done parsing the document type delaration.
     This requires Expat version 1.2 or newer.

`ElementDeclHandler(name, model)'
     Called once for each element type declaration.  NAME is the name
     of the element type, and MODEL is a representation of the content
     model.

`AttlistDeclHandler(elname, attname, type, default, required)'
     Called for each declared attribute for an element type.  If an
     attribute list declaration declares three attributes, this handler
     is called three times, once for each attribute.  ELNAME is the name
     of the element to which the declaration applies and ATTNAME is the
     name of the attribute declared.  The attribute type is a string
     passed as TYPE; the possible values are `'CDATA'', `'ID'',
     `'IDREF'', ...  DEFAULT gives the default value for the attribute
     used when the attribute is not specified by the document instance,
     or `None' if there is no default value (`#IMPLIED' values).  If
     the attribute is required to be given in the document instance,
     REQUIRED will be true.  This requires Expat version 1.95.0 or
     newer.

`StartElementHandler(name, attributes)'
     Called for the start of every element.  NAME is a string
     containing the element name, and ATTRIBUTES is a dictionary
     mapping attribute names to their values.

`EndElementHandler(name)'
     Called for the end of every element.

`ProcessingInstructionHandler(target, data)'
     Called for every processing instruction.

`CharacterDataHandler(data)'
     Called for character data.  This will be called for normal
     character data, CDATA marked content, and ignorable whitespace.
     Applications which must distinguish these cases can use the
     `StartCdataSectionHandler', `EndCdataSectionHandler', and
     `ElementDeclHandler' callbacks to collect the required information.

`UnparsedEntityDeclHandler(entityName, base, systemId, publicId, notationName)'
     Called for unparsed (NDATA) entity declarations.  This is only
     present for version 1.2 of the Expat library; for more recent
     versions, use `EntityDeclHandler' instead.  (The underlying
     function in the Expat library has been declared obsolete.)

`EntityDeclHandler(entityName, is_parameter_entity, value, base, systemId, publicId, notationName)'
     Called for all entity declarations.  For parameter and internal
     entities, VALUE will be a string giving the declared contents of
     the entity; this will be `None' for external entities.  The
     NOTATIONNAME parameter will be `None' for parsed entities, and the
     name of the notation for unparsed entities.  IS_PARAMETER_ENTITY
     will be true if the entity is a paremeter entity or false for
     general entities (most applications only need to be concerned with
     general entities).  This is only available starting with version
     1.95.0 of the Expat library.  _Added in Python version 2.1_

`NotationDeclHandler(notationName, base, systemId, publicId)'
     Called for notation declarations.  NOTATIONNAME, BASE, and
     SYSTEMID, and PUBLICID are strings if given.  If the public
     identifier is omitted, PUBLICID will be `None'.

`StartNamespaceDeclHandler(prefix, uri)'
     Called when an element contains a namespace declaration.  Namespace
     declarations are processed before the `StartElementHandler' is
     called for the element on which declarations are placed.

`EndNamespaceDeclHandler(prefix)'
     Called when the closing tag is reached for an element that
     contained a namespace declaration.  This is called once for each
     namespace declaration on the element in the reverse of the order
     for which the `StartNamespaceDeclHandler' was called to indicate
     the start of each namespace declaration's scope.  Calls to this
     handler are made after the corresponding `EndElementHandler' for
     the end of the element.

`CommentHandler(data)'
     Called for comments.  DATA is the text of the comment, excluding
     the leading ``<!-'`-'' and trailing ``-'`->''.

`StartCdataSectionHandler()'
     Called at the start of a CDATA section.  This and
     `StartCdataSectionHandler' are needed to be able to identify the
     syntactical start and end for CDATA sections.

`EndCdataSectionHandler()'
     Called at the end of a CDATA section.

`DefaultHandler(data)'
     Called for any characters in the XML document for which no
     applicable handler has been specified.  This means characters that
     are part of a construct which could be reported, but for which no
     handler has been supplied.

`DefaultHandlerExpand(data)'
     This is the same as the `DefaultHandler', but doesn't inhibit
     expansion of internal entities.  The entity reference will not be
     passed to the default handler.

`NotStandaloneHandler()'
     Called if the XML document hasn't been declared as being a
     standalone document.  This happens when there is an external
     subset or a reference to a parameter entity, but the XML
     declaration does not set standalone to `yes' in an XML
     declaration.  If this handler returns `0', then the parser will
     throw an `XML_ERROR_NOT_STANDALONE' error.  If this handler is not
     set, no exception is raised by the parser for this condition.

`ExternalEntityRefHandler(context, base, systemId, publicId)'
     Called for references to external entities.  BASE is the current
     base, as set by a previous call to `SetBase()'.  The public and
     system identifiers, SYSTEMID and PUBLICID, are strings if given;
     if the public identifier is not given, PUBLICID will be `None'.
     The CONTEXT value is opaque and should only be used as described
     below.

     For external entities to be parsed, this handler must be
     implemented.  It is responsible for creating the sub-parser using
     `ExternalEntityParserCreate(CONTEXT)', initializing it with the
     appropriate callbacks, and parsing the entity.  This handler
     should return an integer; if it returns `0', the parser will throw
     an `XML_ERROR_EXTERNAL_ENTITY_HANDLING' error, otherwise parsing
     will continue.

     If this handler is not provided, external entities are reported by
     the `DefaultHandler' callback, if provided.


File: python-lib.info,  Node: ExpatError Exceptions,  Next: Example 10,  Prev: XMLParser Objects,  Up: xmlparsersexpat

ExpatError Exceptions
---------------------

`ExpatError' exceptions have a number of interesting attributes:

`code'
     Expat's internal error number for the specific error.  This will
     match one of the constants defined in the `errors' object from
     this module.  _Added in Python version 2.1_

`lineno'
     Line number on which the error was detected.  The first line is
     numbered `1'.  _Added in Python version 2.1_

`offset'
     Character offset into the line where the error occurred.  The first
     column is numbered `0'.  _Added in Python version 2.1_


File: python-lib.info,  Node: Example 10,  Next: Content Model Descriptions,  Prev: ExpatError Exceptions,  Up: xmlparsersexpat

Example
-------

The following program defines three handlers that just print out their
arguments.

     import xml.parsers.expat
     
     # 3 handler functions
     def start_element(name, attrs):
         print 'Start element:', name, attrs
     def end_element(name):
         print 'End element:', name
     def char_data(data):
         print 'Character data:', repr(data)
     
     p = xml.parsers.expat.ParserCreate()
     
     p.StartElementHandler = start_element
     p.EndElementHandler = end_element
     p.CharacterDataHandler = char_data
     
     p.Parse("""<?xml version="1.0"?>
     <parent id="top"><child1 name="paul">Text goes here</child1>
     <child2 name="fred">More text</child2>
     </parent>""", 1)

The output from this program is:

     Start element: parent {'id': 'top'}
     Start element: child1 {'name': 'paul'}
     Character data: 'Text goes here'
     End element: child1
     Character data: '\n'
     Start element: child2 {'name': 'fred'}
     Character data: 'More text'
     End element: child2
     Character data: '\n'
     End element: parent


File: python-lib.info,  Node: Content Model Descriptions,  Next: Expat error constants,  Prev: Example 10,  Up: xmlparsersexpat

Content Model Descriptions
--------------------------

Content modules are described using nested tuples.  Each tuple contains
four values: the type, the quantifier, the name, and a tuple of
children.  Children are simply additional content module descriptions.

The values of the first two fields are constants defined in the `model'
object of the `xml.parsers.expat' module.  These constants can be
collected in two groups: the model type group and the quantifier group.

The constants in the model type group are:

`XML_CTYPE_ANY'
     The element named by the model name was declared to have a content
     model of `ANY'.

`XML_CTYPE_CHOICE'
     The named element allows a choice from a number of options; this is
     used for content models such as `(A | B | C)'.

`XML_CTYPE_EMPTY'
     Elements which are declared to be `EMPTY' have this model type.

`XML_CTYPE_MIXED'

`XML_CTYPE_NAME'

`XML_CTYPE_SEQ'
     Models which represent a series of models which follow one after
     the other are indicated with this model type.  This is used for
     models such as `(A, B, C)'.

The constants in the quantifier group are:

`XML_CQUANT_NONE'
     No modifier is given, so it can appear exactly once, as for `A'.

`XML_CQUANT_OPT'
     The model is optional: it can appear once or not at all, as for
     `A?'.

`XML_CQUANT_PLUS'
     The model must occur one or more times (like `A+').

`XML_CQUANT_REP'
     The model must occur zero or more times, as for `A*'.


File: python-lib.info,  Node: Expat error constants,  Prev: Content Model Descriptions,  Up: xmlparsersexpat

Expat error constants
---------------------

The following constants are provided in the `errors' object of the
`xml.parsers.expat' module.  These constants are useful in interpreting
some of the attributes of the `ExpatError' exception objects raised
when an error has occurred.

The `errors' object has the following attributes:

`XML_ERROR_ASYNC_ENTITY'

`XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF'
     An entity reference in an attribute value referred to an external
     entity instead of an internal entity.

`XML_ERROR_BAD_CHAR_REF'
     A character reference referred to a character which is illegal in
     XML (for example, character `0', or ``&#0;'').

`XML_ERROR_BINARY_ENTITY_REF'
     An entity reference referred to an entity which was declared with a
     notation, so cannot be parsed.

`XML_ERROR_DUPLICATE_ATTRIBUTE'
     An attribute was used more than once in a start tag.

`XML_ERROR_INCORRECT_ENCODING'

`XML_ERROR_INVALID_TOKEN'
     Raised when an input byte could not properly be assigned to a
     character; for example, a NUL byte (value `0') in a UTF-8 input
     stream.

`XML_ERROR_JUNK_AFTER_DOC_ELEMENT'
     Something other than whitespace occurred after the document
     element.

`XML_ERROR_MISPLACED_XML_PI'
     An XML declaration was found somewhere other than the start of the
     input data.

`XML_ERROR_NO_ELEMENTS'
     The document contains no elements (XML requires all documents to
     contain exactly one top-level element)..

`XML_ERROR_NO_MEMORY'
     Expat was not able to allocate memory internally.

`XML_ERROR_PARAM_ENTITY_REF'
     A parameter entity reference was found where it was not allowed.

`XML_ERROR_PARTIAL_CHAR'

`XML_ERROR_RECURSIVE_ENTITY_REF'
     An entity reference contained another reference to the same entity;
     possibly via a different name, and possibly indirectly.

`XML_ERROR_SYNTAX'
     Some unspecified syntax error was encountered.

`XML_ERROR_TAG_MISMATCH'
     An end tag did not match the innermost open start tag.

`XML_ERROR_UNCLOSED_TOKEN'
     Some token (such as a start tag) was not closed before the end of
     the stream or the next token was encountered.

`XML_ERROR_UNDEFINED_ENTITY'
     A reference was made to a entity which was not defined.

`XML_ERROR_UNKNOWN_ENCODING'
     The document encoding is not supported by Expat.


File: python-lib.info,  Node: xmldom,  Next: xmldomminidom,  Prev: xmlparsersexpat,  Up: Structured Markup Processing Tools

The Document Object Model API
=============================

Document Object Model API for Python.

_Added in Python version 2.0_

The Document Object Model, or "DOM," is a cross-language API from the
World Wide Web Consortium (W3C) for accessing and modifying XML
documents.  A DOM implementation presents an XML document as a tree
structure, or allows client code to build such a structure from
scratch.  It then gives access to the structure through a set of
objects which provided well-known interfaces.

The DOM is extremely useful for random-access applications.  SAX only
allows you a view of one bit of the document at a time.  If you are
looking at one SAX element, you have no access to another.  If you are
looking at a text node, you have no access to a containing element.
When you write a SAX application, you need to keep track of your
program's position in the document somewhere in your own code.  SAX
does not do it for you.  Also, if you need to look ahead in the XML
document, you are just out of luck.

Some applications are simply impossible in an event driven model with
no access to a tree.  Of course you could build some sort of tree
yourself in SAX events, but the DOM allows you to avoid writing that
code.  The DOM is a standard tree representation for XML data.

The Document Object Model is being defined by the W3C in stages, or
"levels" in their terminology.  The Python mapping of the API is
substantially based on the DOM Level~2 recommendation.  The mapping of
the Level~3 specification, currently only available in draft form, is
being developed by the Python XML Special Interest Group as part of the
PyXML package.  Refer to the documentation bundled with that package
for information on the current state of DOM Level~3 support.

DOM applications typically start by parsing some XML into a DOM.  How
this is accomplished is not covered at all by DOM Level~1, and Level~2
provides only limited improvements: There is a `DOMImplementation'
object class which provides access to `Document' creation methods, but
no way to access an XML reader/parser/Document builder in an
implementation-independent way.  There is also no well-defined way to
access these methods without an existing `Document' object.  In Python,
each DOM implementation will provide a function
`getDOMImplementation()'. DOM Level~3 adds a Load/Store specification,
which defines an interface to the reader, but this is not yet available
in the Python standard library.

Once you have a DOM document object, you can access the parts of your
XML document through its properties and methods.  These properties are
defined in the DOM specification; this portion of the reference manual
describes the interpretation of the specification in Python.

The specification provided by the W3C defines the DOM API for Java,
ECMAScript, and OMG IDL.  The Python mapping defined here is based in
large part on the IDL version of the specification, but strict
compliance is not required (though implementations are free to support
the strict mapping from IDL).  See section *Note Conformance::,
"Conformance," for a detailed discussion of mapping requirements.

See also:
     `Document Object Model (DOM) Level~2 Specification' {The W3C
     recommendation upon which the Python DOM API is based.} `Document
     Object Model (DOM) Level~1 Specification' {The W3C recommendation
     for the DOM supported by `xml.dom.minidom'.} `PyXML'{Users that
     require a full-featured implementation of DOM should use the PyXML
     package.} `CORBA Scripting with Python' {This specifies the
     mapping from OMG IDL to Python.}

* Menu:

* Module Contents 4::
* Objects in the DOM::
* Conformance::


File: python-lib.info,  Node: Module Contents 4,  Next: Objects in the DOM,  Prev: xmldom,  Up: xmldom

Module Contents
---------------

The `xml.dom' contains the following functions:

`registerDOMImplementation(name, factory)'
     Register the FACTORY function with the name NAME.  The factory
     function should return an object which implements the
     `DOMImplementation' interface.  The factory function can return
     the same object every time, or a new one for each call, as
     appropriate for the specific implementation (e.g. if that
     implementation supports some customization).

`getDOMImplementation([name[, features]])'
     Return a suitable DOM implementation. The NAME is either
     well-known, the module name of a DOM implementation, or `None'. If
     it is not `None', imports the corresponding module and returns a
     `DOMImplementation' object if the import succeeds.  If no name is
     given, and if the environment variable `PYTHON_DOM' is set, this
     variable is used to find the implementation.

     If name is not given, this examines the available implementations
     to find one with the required feature set.  If no implementation
     can be found, raise an `ImportError'.  The features list must be a
     sequence of `(FEATURE, VERSION)' pairs which are passed to the
     `hasFeature()' method on available `DOMImplementation' objects.

Some convenience constants are also provided:

`EMPTY_NAMESPACE'
     The value used to indicate that no namespace is associated with a
     node in the DOM.  This is typically found as the `namespaceURI' of
     a node, or used as the NAMESPACEURI parameter to a
     namespaces-specific method.  _Added in Python version 2.2_

`XML_NAMESPACE'
     The namespace URI associated with the reserved prefix `xml', as
     defined by

     (section~4).  _Added in Python version 2.2_

`XMLNS_NAMESPACE'
     The namespace URI for namespace declarations, as defined by
     (section~1.1.8).  _Added in Python version 2.2_

`XHTML_NAMESPACE'
     The URI of the XHTML namespace as defined by  (section~3.1.1).
     _Added in Python version 2.2_

In addition, `xml.dom' contains a base `Node' class and the DOM
exception classes.  The `Node' class provided by this module does not
implement any of the methods or attributes defined by the DOM
specification; concrete DOM implementations must provide those.  The
`Node' class provided as part of this module does provide the constants
used for the `nodeType' attribute on concrete `Node' objects; they are
located within the class rather than at the module level to conform
with the DOM specifications.


File: python-lib.info,  Node: Objects in the DOM,  Next: Conformance,  Prev: Module Contents 4,  Up: xmldom

Objects in the DOM
------------------

The definitive documentation for the DOM is the DOM specification from
the W3C.

Note that DOM attributes may also be manipulated as nodes instead of as
simple strings.  It is fairly rare that you must do this, however, so
this usage is not yet documented.

Interface                Section                  Purpose
------                   -----                    -----
DOMImplementation        *Note DOMImplementation  Interface to the
                         Objects::                underlying
                                                  implementation.
Node                     *Note Node Objects::     Base interface for most
                                                  objects in a document.
NodeList                 *Note NodeList           Interface for a
                         Objects::                sequence of nodes.
DocumentType             *Note DocumentType       Information about the
                         Objects::                declarations needed to
                                                  process a document.
Document                 *Note Document           Object which represents
                         Objects::                an entire document.
Element                  *Note Element Objects::  Element nodes in the
                                                  document hierarchy.
Attr                     *Note Attr Objects::     Attribute value nodes
                                                  on element nodes.
Comment                  *Note Comment Objects::  Representation of
                                                  comments in the source
                                                  document.
Text                     *Note Text and           Nodes containing
                         CDATASection Objects::   textual content from
                                                  the document.
ProcessingInstruction    *Note                    Processing instruction
                         ProcessingInstruction    representation.
                         Objects::                

An additional section describes the exceptions defined for working with
the DOM in Python.

* Menu:

* DOMImplementation Objects::
* Node Objects::
* NodeList Objects::
* DocumentType Objects::
* Document Objects::
* Element Objects::
* Attr Objects::
* NamedNodeMap Objects::
* Comment Objects::
* Text and CDATASection Objects::
* ProcessingInstruction Objects::
* Exceptions 2::


File: python-lib.info,  Node: DOMImplementation Objects,  Next: Node Objects,  Prev: Objects in the DOM,  Up: Objects in the DOM

DOMImplementation Objects
.........................

The `DOMImplementation' interface provides a way for applications to
determine the availability of particular features in the DOM they are
using.  DOM Level~2 added the ability to create new `Document' and
`DocumentType' objects using the `DOMImplementation' as well.

`hasFeature(feature, version)'

File: python-lib.info,  Node: Node Objects,  Next: NodeList Objects,  Prev: DOMImplementation Objects,  Up: Objects in the DOM

Node Objects
............

All of the components of an XML document are subclasses of `Node'.

`nodeType'
     An integer representing the node type.  Symbolic constants for the
     types are on the `Node' object: `ELEMENT_NODE', `ATTRIBUTE_NODE',
     `TEXT_NODE', `CDATA_SECTION_NODE', `ENTITY_NODE',
     `PROCESSING_INSTRUCTION_NODE', `COMMENT_NODE', `DOCUMENT_NODE',
     `DOCUMENT_TYPE_NODE', `NOTATION_NODE'.  This is a read-only
     attribute.

`parentNode'
     The parent of the current node, or `None' for the document node.
     The value is always a `Node' object or `None'.  For `Element'
     nodes, this will be the parent element, except for the root
     element, in which case it will be the `Document' object.  For
     `Attr' nodes, this is always `None'.  This is a read-only
     attribute.

`attributes'
     A `NamedNodeMap' of attribute objects.  Only elements have actual
     values for this; others provide `None' for this attribute.  This
     is a read-only attribute.

`previousSibling'
     The node that immediately precedes this one with the same parent.
     For instance the element with an end-tag that comes just before the
     SELF element's start-tag.  Of course, XML documents are made up of
     more than just elements so the previous sibling could be text, a
     comment, or something else.  If this node is the first child of the
     parent, this attribute will be `None'.  This is a read-only
     attribute.

`nextSibling'
     The node that immediately follows this one with the same parent.
     See also `previousSibling'.  If this is the last child of the
     parent, this attribute will be `None'.  This is a read-only
     attribute.

`childNodes'
     A list of nodes contained within this node.  This is a read-only
     attribute.

`firstChild'
     The first child of the node, if there are any, or `None'.  This is
     a read-only attribute.

`lastChild'
     The last child of the node, if there are any, or `None'.  This is
     a read-only attribute.

`localName'
     The part of the `tagName' following the colon if there is one,
     else the entire `tagName'.  The value is a string.

`prefix'
     The part of the `tagName' preceding the colon if there is one,
     else the empty string.  The value is a string, or `None'

`namespaceURI'
     The namespace associated with the element name.  This will be a
     string or `None'.  This is a read-only attribute.

`nodeName'
     This has a different meaning for each node type; see the DOM
     specification for details.  You can always get the information you
     would get here from another property such as the `tagName'
     property for elements or the `name' property for attributes.  For
     all node types, the value of this attribute will be either a
     string or `None'.  This is a read-only attribute.

`nodeValue'
     This has a different meaning for each node type; see the DOM
     specification for details.  The situation is similar to that with
     `nodeName'.  The value is a string or `None'.

`hasAttributes()'
     Returns true if the node has any attributes.

`hasChildNodes()'
     Returns true if the node has any child nodes.

`isSameNode(other)'
     Returns true if OTHER refers to the same node as this node.  This
     is especially useful for DOM implementations which use any sort of
     proxy architecture (because more than one object can refer to the
     same node).

     _Notice:_ This is based on a proposed DOM Level~3 API which is
     still in the "working draft" stage, but this particular interface
     appears uncontroversial.  Changes from the W3C will not
     necessarily affect this method in the Python DOM interface (though
     any new W3C API for this would also be supported).

`appendChild(newChild)'
     Add a new child node to this node at the end of the list of
     children, returning NEWCHILD.

`insertBefore(newChild, refChild)'
     Insert a new child node before an existing child.  It must be the
     case that REFCHILD is a child of this node; if not, `ValueError'
     is raised.  NEWCHILD is returned.

`removeChild(oldChild)'
     Remove a child node.  OLDCHILD must be a child of this node; if
     not, `ValueError' is raised.  OLDCHILD is returned on success.  If
     OLDCHILD will not be used further, its `unlink()' method should be
     called.

`replaceChild(newChild, oldChild)'
     Replace an existing node with a new node. It must be the case that
     OLDCHILD is a child of this node; if not, `ValueError' is raised.

`normalize()'
     Join adjacent text nodes so that all stretches of text are stored
     as single `Text' instances.  This simplifies processing text from a
     DOM tree for many applications.  _Added in Python version 2.1_

`cloneNode(deep)'
     Clone this node.  Setting DEEP means to clone all child nodes as
     well.  This returns the clone.


File: python-lib.info,  Node: NodeList Objects,  Next: DocumentType Objects,  Prev: Node Objects,  Up: Objects in the DOM

NodeList Objects
................

A `NodeList' represents a sequence of nodes.  These objects are used in
two ways in the DOM Core recommendation:  the `Element' objects
provides one as its list of child nodes, and the
`getElementsByTagName()' and `getElementsByTagNameNS()' methods of
`Node' return objects with this interface to represent query results.

The DOM Level~2 recommendation defines one method and one attribute for
these objects:

`item(i)'
     Return the I'th item from the sequence, if there is one, or
     `None'.  The index I is not allowed to be less then zero or
     greater than or equal to the length of the sequence.

`length'
     The number of nodes in the sequence.

In addition, the Python DOM interface requires that some additional
support is provided to allow `NodeList' objects to be used as Python
sequences.  All `NodeList' implementations must include support for
`__len__()' and `__getitem__()'; this allows iteration over the
`NodeList' in `for' statements and proper support for the `len()'
built-in function.

If a DOM implementation supports modification of the document, the
`NodeList' implementation must also support the `__setitem__()' and
`__delitem__()' methods.


File: python-lib.info,  Node: DocumentType Objects,  Next: Document Objects,  Prev: NodeList Objects,  Up: Objects in the DOM

DocumentType Objects
....................

Information about the notations and entities declared by a document
(including the external subset if the parser uses it and can provide
the information) is available from a `DocumentType' object.  The
`DocumentType' for a document is available from the `Document' object's
`doctype' attribute; if there is no `DOCTYPE' declaration for the
document, the document's `doctype' attribute will be set to `None'
instead of an instance of this interface.

`DocumentType' is a specialization of `Node', and adds the following
attributes:

`publicId'
     The public identifier for the external subset of the document type
     definition.  This will be a string or `None'.

`systemId'
     The system identifier for the external subset of the document type
     definition.  This will be a URI as a string, or `None'.

`internalSubset'
     A string giving the complete internal subset from the document.
     This does not include the brackets which enclose the subset.  If
     the document has no internal subset, this should be `None'.

`name'
     The name of the root element as given in the `DOCTYPE'
     declaration, if present.

`entities'
     This is a `NamedNodeMap' giving the definitions of external
     entities.  For entity names defined more than once, only the first
     definition is provided (others are ignored as required by the XML
     recommendation).  This may be `None' if the information is not
     provided by the parser, or if no entities are defined.

`notations'
     This is a `NamedNodeMap' giving the definitions of notations.  For
     notation names defined more than once, only the first definition
     is provided (others are ignored as required by the XML
     recommendation).  This may be `None' if the information is not
     provided by the parser, or if no notations are defined.


File: python-lib.info,  Node: Document Objects,  Next: Element Objects,  Prev: DocumentType Objects,  Up: Objects in the DOM

Document Objects
................

A `Document' represents an entire XML document, including its
constituent elements, attributes, processing instructions, comments
etc.  Remeber that it inherits properties from `Node'.

`documentElement'
     The one and only root element of the document.

`createElement(tagName)'
     Create and return a new element node.  The element is not inserted
     into the document when it is created.  You need to explicitly
     insert it with one of the other methods such as `insertBefore()' or
     `appendChild()'.

`createElementNS(namespaceURI, tagName)'
     Create and return a new element with a namespace.  The TAGNAME may
     have a prefix.  The element is not inserted into the document when
     it is created.  You need to explicitly insert it with one of the
     other methods such as `insertBefore()' or `appendChild()'.

`createTextNode(data)'
     Create and return a text node containing the data passed as a
     parameter.  As with the other creation methods, this one does not
     insert the node into the tree.

`createComment(data)'
     Create and return a comment node containing the data passed as a
     parameter.  As with the other creation methods, this one does not
     insert the node into the tree.

`createProcessingInstruction(target, data)'
     Create and return a processing instruction node containing the
     TARGET and DATA passed as parameters.  As with the other creation
     methods, this one does not insert the node into the tree.

`createAttribute(name)'
     Create and return an attribute node.  This method does not
     associate the attribute node with any particular element.  You
     must use `setAttributeNode()' on the appropriate `Element' object
     to use the newly created attribute instance.

`createAttributeNS(namespaceURI, qualifiedName)'
     Create and return an attribute node with a namespace.  The TAGNAME
     may have a prefix.  This method does not associate the attribute
     node with any particular element.  You must use
     `setAttributeNode()' on the appropriate `Element' object to use
     the newly created attribute instance.

`getElementsByTagName(tagName)'
     Search for all descendants (direct children, children's children,
     etc.) with a particular element type name.

`getElementsByTagNameNS(namespaceURI, localName)'
     Search for all descendants (direct children, children's children,
     etc.) with a particular namespace URI and localname.  The
     localname is the part of the namespace after the prefix.


File: python-lib.info,  Node: Element Objects,  Next: Attr Objects,  Prev: Document Objects,  Up: Objects in the DOM

Element Objects
...............

`Element' is a subclass of `Node', so inherits all the attributes of
that class.

`tagName'
     The element type name.  In a namespace-using document it may have
     colons in it.  The value is a string.

`getElementsByTagName(tagName)'
     Same as equivalent method in the `Document' class.

`getElementsByTagNameNS(tagName)'
     Same as equivalent method in the `Document' class.

`getAttribute(attname)'
     Return an attribute value as a string.

`getAttributeNode(attrname)'
     Return the `Attr' node for the attribute named by ATTRNAME.

`getAttributeNS(namespaceURI, localName)'
     Return an attribute value as a string, given a NAMESPACEURI and
     LOCALNAME.

`getAttributeNodeNS(namespaceURI, localName)'
     Return an attribute value as a node, given a NAMESPACEURI and
     LOCALNAME.

`removeAttribute(attname)'
     Remove an attribute by name.  No exception is raised if there is no
     matching attribute.

`removeAttributeNode(oldAttr)'
     Remove and return OLDATTR from the attribute list, if present.  If
     OLDATTR is not present, `NotFoundErr' is raised.

`removeAttributeNS(namespaceURI, localName)'
     Remove an attribute by name.  Note that it uses a localName, not a
     qname.  No exception is raised if there is no matching attribute.

`setAttribute(attname, value)'
     Set an attribute value from a string.

`setAttributeNode(newAttr)'
     Add a new attibute node to the element, replacing an existing
     attribute if necessary if the `name' attribute matches.  If a
     replacement occurs, the old attribute node will be returned.  If
     NEWATTR is already in use, `InuseAttributeErr' will be raised.

`setAttributeNodeNS(newAttr)'
     Add a new attibute node to the element, replacing an existing
     attribute if necessary if the `namespaceURI' and `localName'
     attributes match.  If a replacement occurs, the old attribute node
     will be returned.  If NEWATTR is already in use,
     `InuseAttributeErr' will be raised.

`setAttributeNS(namespaceURI, qname, value)'
     Set an attribute value from a string, given a NAMESPACEURI and a
     QNAME.  Note that a qname is the whole attribute name.  This is
     different than above.


File: python-lib.info,  Node: Attr Objects,  Next: NamedNodeMap Objects,  Prev: Element Objects,  Up: Objects in the DOM

Attr Objects
............

`Attr' inherits from `Node', so inherits all its attributes.

`name'
     The attribute name.  In a namespace-using document it may have
     colons in it.

`localName'
     The part of the name following the colon if there is one, else the
     entire name.  This is a read-only attribute.

`prefix'
     The part of the name preceding the colon if there is one, else the
     empty string.


File: python-lib.info,  Node: NamedNodeMap Objects,  Next: Comment Objects,  Prev: Attr Objects,  Up: Objects in the DOM

NamedNodeMap Objects
....................

`NamedNodeMap' does _not_ inherit from `Node'.

`length'
     The length of the attribute list.

`item(index)'
     Return an attribute with a particular index.  The order you get the
     attributes in is arbitrary but will be consistent for the life of a
     DOM.  Each item is an attribute node.  Get its value with the
     `value' attribbute.

There are also experimental methods that give this class more mapping
behavior.  You can use them or you can use the standardized
`getAttribute*()' family of methods on the `Element' objects.


File: python-lib.info,  Node: Comment Objects,  Next: Text and CDATASection Objects,  Prev: NamedNodeMap Objects,  Up: Objects in the DOM

Comment Objects
...............

`Comment' represents a comment in the XML document.  It is a subclass
of `Node', but cannot have child nodes.

`data'
     The content of the comment as a string.  The attribute contains all
     characters between the leading `<!-'`-' and trailing `-'`->', but
     does not include them.


File: python-lib.info,  Node: Text and CDATASection Objects,  Next: ProcessingInstruction Objects,  Prev: Comment Objects,  Up: Objects in the DOM

Text and CDATASection Objects
.............................

The `Text' interface represents text in the XML document.  If the
parser and DOM implementation support the DOM's XML extension, portions
of the text enclosed in CDATA marked sections are stored in
`CDATASection' objects.  These two interfaces are identical, but
provide different values for the `nodeType' attribute.

These interfaces extend the `Node' interface.  They cannot have child
nodes.

`data'
     The content of the text node as a string.

_Notice:_ The use of a `CDATASection' node does not indicate that the
node represents a complete CDATA marked section, only that the content
of the node was part of a CDATA section.  A single CDATA section may be
represented by more than one node in the document tree.  There is no
way to determine whether two adjacent `CDATASection' nodes represent
different CDATA marked sections.


File: python-lib.info,  Node: ProcessingInstruction Objects,  Next: Exceptions 2,  Prev: Text and CDATASection Objects,  Up: Objects in the DOM

ProcessingInstruction Objects
.............................

Represents a processing instruction in the XML document; this inherits
from the `Node' interface and cannot have child nodes.

`target'
     The content of the processing instruction up to the first
     whitespace character.  This is a read-only attribute.

`data'
     The content of the processing instruction following the first
     whitespace character.


File: python-lib.info,  Node: Exceptions 2,  Prev: ProcessingInstruction Objects,  Up: Objects in the DOM

Exceptions
..........

_Added in Python version 2.1_

The DOM Level~2 recommendation defines a single exception,
`DOMException', and a number of constants that allow applications to
determine what sort of error occurred.  `DOMException' instances carry
a `code' attribute that provides the appropriate value for the specific
exception.

The Python DOM interface provides the constants, but also expands the
set of exceptions so that a specific exception exists for each of the
exception codes defined by the DOM.  The implementations must raise the
appropriate specific exception, each of which carries the appropriate
value for the `code' attribute.

`DOMException'
     Base exception class used for all specific DOM exceptions.  This
     exception class cannot be directly instantiated.

`DomstringSizeErr'
     Raised when a specified range of text does not fit into a string.
     This is not known to be used in the Python DOM implementations, but
     may be received from DOM implementations not written in Python.

`HierarchyRequestErr'
     Raised when an attempt is made to insert a node where the node type
     is not allowed.

`IndexSizeErr'
     Raised when an index or size parameter to a method is negative or
     exceeds the allowed values.

`InuseAttributeErr'
     Raised when an attempt is made to insert an `Attr' node that is
     already present elsewhere in the document.

`InvalidAccessErr'
     Raised if a parameter or an operation is not supported on the
     underlying object.

`InvalidCharacterErr'
     This exception is raised when a string parameter contains a
     character that is not permitted in the context it's being used in
     by the XML 1.0 recommendation.  For example, attempting to create
     an `Element' node with a space in the element type name will cause
     this error to be raised.

`InvalidModificationErr'
     Raised when an attempt is made to modify the type of a node.

`InvalidStateErr'
     Raised when an attempt is made to use an object that is not or is
     no longer usable.

`NamespaceErr'
     If an attempt is made to change any object in a way that is not
     permitted with regard to the

     recommendation, this exception is raised.

`NotFoundErr'
     Exception when a node does not exist in the referenced context.
     For example, `NamedNodeMap.removeNamedItem()' will raise this if
     the node passed in does not exist in the map.

`NotSupportedErr'
     Raised when the implementation does not support the requested type
     of object or operation.

`NoDataAllowedErr'
     This is raised if data is specified for a node which does not
     support data.

`NoModificationAllowedErr'
     Raised on attempts to modify an object where modifications are not
     allowed (such as for read-only nodes).

`SyntaxErr'
     Raised when an invalid or illegal string is specified.

`WrongDocumentErr'
     Raised when a node is inserted in a different document than it
     currently belongs to, and the implementation does not support
     migrating the node from one document to the other.

The exception codes defined in the DOM recommendation map to the
exceptions described above according to this table:

Constant                             Exception
------                               -----
DOMSTRING_SIZE_ERR                   `DomstringSizeErr'
HIERARCHY_REQUEST_ERR                `HierarchyRequestErr'
INDEX_SIZE_ERR                       `IndexSizeErr'
INUSE_ATTRIBUTE_ERR                  `InuseAttributeErr'
INVALID_ACCESS_ERR                   `InvalidAccessErr'
INVALID_CHARACTER_ERR                `InvalidCharacterErr'
INVALID_MODIFICATION_ERR             `InvalidModificationErr'
INVALID_STATE_ERR                    `InvalidStateErr'
NAMESPACE_ERR                        `NamespaceErr'
NOT_FOUND_ERR                        `NotFoundErr'
NOT_SUPPORTED_ERR                    `NotSupportedErr'
NO_DATA_ALLOWED_ERR                  `NoDataAllowedErr'
NO_MODIFICATION_ALLOWED_ERR          `NoModificationAllowedErr'
SYNTAX_ERR                           `SyntaxErr'
WRONG_DOCUMENT_ERR                   `WrongDocumentErr'


File: python-lib.info,  Node: Conformance,  Prev: Objects in the DOM,  Up: xmldom

Conformance
-----------

This section describes the conformance requirements and relationships
between the Python DOM API, the W3C DOM recommendations, and the OMG
IDL mapping for Python.

* Menu:

* Type Mapping::
* Accessor Methods::

