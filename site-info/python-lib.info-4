This is python-lib.info, produced by makeinfo version 4.3 from
python-lib.texi.

October 3, 2003


File: python-lib.info,  Node: File Objects,  Next: Other Built-in Types,  Prev: Mapping Types,  Up: Built-in Types

File Objects
------------

File objects  are implemented using C's `stdio' package and can be
created with the built-in constructor `file()'  described in section
*Note Built-in Functions::, "Built-in Functions."(1) File objects are
also returned by some other built-in functions and methods, such as
`os.popen()' and `os.fdopen()' and the `makefile()' method of socket
objects.

When a file operation fails for an I/O-related reason, the exception
`IOError' is raised.  This includes situations where the operation is
not defined for some reason, like `seek()' on a tty device or writing a
file opened for reading.

Files have the following methods:

`close()'
     Close the file.  A closed file cannot be read or written any more.
     Any operation which requires that the file be open will raise a
     `ValueError' after the file has been closed.  Calling `close()'
     more than once is allowed.

`flush()'
     Flush the internal buffer, like `stdio''s `fflush()'.  This may be
     a no-op on some file-like objects.

`fileno()'
     Return the integer "file descriptor" that is used by the
     underlying implementation to request I/O operations from the
     operating system.  This can be useful for other, lower level
     interfaces that use file descriptors, such as the `fcntl'  module
     or `os.read()' and friends.  _Note:_ File-like objects which do
     not have a real file descriptor should _not_ provide this method!

`isatty()'
     Return `True' if the file is connected to a tty(-like) device, else
     `False'.  _Note:_ If a file-like object is not associated with a
     real file, this method should _not_ be implemented.

`next()'
     A file object is its own iterator, for example `iter(F)' returns F
     (unless F is closed).  When a file is used as an iterator,
     typically in a `for' loop (for example, `for line in f: print
     line'), the `next()' method is called repeatedly.  This method
     returns the next input line, or raises `StopIteration' when `EOF'
     is hit.  In order to make a `for' loop the most efficient way of
     looping over the lines of a file (a very common operation), the
     `next()' method uses a hidden read-ahead buffer.  As a consequence
     of using a read-ahead buffer, combining `next()' with other file
     methods (like `readline()') does not work right.  However, using
     `seek()' to reposition the file to an absolute position will flush
     the read-ahead buffer.  _Added in Python version 2.3_

`read([size])'
     Read at most SIZE bytes from the file (less if the read hits `EOF'
     before obtaining SIZE bytes).  If the SIZE argument is negative or
     omitted, read all data until `EOF' is reached.  The bytes are
     returned as a string object.  An empty string is returned when
     `EOF' is encountered immediately.  (For certain files, like ttys,
     it makes sense to continue reading after an `EOF' is hit.)  Note
     that this method may call the underlying C function `fread()' more
     than once in an effort to acquire as close to SIZE bytes as
     possible. Also note that when in non-blocking mode, less data than
     what was requested may be returned, even if no SIZE parameter was
     given.

`readline([size])'
     Read one entire line from the file.  A trailing newline character
     is kept in the string(2) (but may be absent when a file ends with
     an incomplete line).  If the SIZE argument is present and
     non-negative, it is a maximum byte count (including the trailing
     newline) and an incomplete line may be returned.  An empty string
     is returned _only_ when `EOF' is encountered immediately.  _Note:_
     Unlike `stdio''s `fgets()', the returned string contains null
     characters (`'\0'') if they occurred in the input.

`readlines([sizehint])'
     Read until `EOF' using `readline()' and return a list containing
     the lines thus read.  If the optional SIZEHINT argument is
     present, instead of reading up to `EOF', whole lines totalling
     approximately SIZEHINT bytes (possibly after rounding up to an
     internal buffer size) are read.  Objects implementing a file-like
     interface may choose to ignore SIZEHINT if it cannot be
     implemented, or cannot be implemented efficiently.

`xreadlines()'
     This method returns the same thing as `iter(f)'.  _Added in Python
     version 2.1_ _This is deprecated in Python 2.3.  Use `for line in
     file' instead._

`seek(offset[, whence])'
     Set the file's current position, like `stdio''s `fseek()'.  The
     WHENCE argument is optional and defaults to `0' (absolute file
     positioning); other values are `1' (seek relative to the current
     position) and `2' (seek relative to the file's end).  There is no
     return value.  Note that if the file is opened for appending (mode
     `'a'' or `'a+''), any `seek()' operations will be undone at the
     next write.  If the file is only opened for writing in append mode
     (mode `'a''), this method is essentially a no-op, but it remains
     useful for files opened in append mode with reading enabled (mode
     `'a+'').

`tell()'
     Return the file's current position, like `stdio''s `ftell()'.

`truncate([size])'
     Truncate the file's size.  If the optional SIZE argument is
     present, the file is truncated to (at most) that size.  The size
     defaults to the current position.  The current file position is
     not changed.  Note that if a specified size exceeds the file's
     current size, the result is platform-dependent:  possibilities
     include that file may remain unchanged, increase to the specified
     size as if zero-filled, or increase to the specified size with
     undefined new content.  Availability:  Windows, many UNIX variants.

`write(str)'
     Write a string to the file.  There is no return value.  Due to
     buffering, the string may not actually show up in the file until
     the `flush()' or `close()' method is called.

`writelines(sequence)'
     Write a sequence of strings to the file.  The sequence can be any
     iterable object producing strings, typically a list of strings.
     There is no return value.  (The name is intended to match
     `readlines()'; `writelines()' does not add line separators.)

Files support the iterator protocol.  Each iteration returns the same
result as `FILE.readline()', and iteration ends when the `readline()'
method returns an empty string.

File objects also offer a number of other interesting attributes.
These are not required for file-like objects, but should be implemented
if they make sense for the particular object.

`closed'
     bool indicating the current state of the file object.  This is a
     read-only attribute; the `close()' method changes the value.  It
     may not be available on all file-like objects.

`encoding'
     The encoding that this file uses. When Unicode strings are written
     to a file, they will be converted to byte strings using this
     encoding.  In addition, when the file is connected to a terminal,
     the attribute gives the encoding that the terminal is likely to
     use (that information might be incorrect if the user has
     misconfigured the terminal). The attribute is read-only and may
     not be present on all file-like objects. It may also be `None', in
     which case the file uses the system default encoding for
     converting Unicode strings.

     _Added in Python version 2.3_

`mode'
     The I/O mode for the file.  If the file was created using the
     `open()' built-in function, this will be the value of the MODE
     parameter.  This is a read-only attribute and may not be present
     on all file-like objects.

`name'
     If the file object was created using `open()', the name of the
     file.  Otherwise, some string that indicates the source of the
     file object, of the form `<...>'.  This is a read-only attribute
     and may not be present on all file-like objects.

`newlines'
     If Python was built with the `--with-universal-newlines' option
     (the default) this read-only attribute exists, and for files
     opened in universal newline read mode it keeps track of the types
     of newlines encountered while reading the file. The values it can
     take are `'\r'', `'\n'', `'\r\n'', `None' (unknown, no newlines
     read yet) or a tuple containing all the newline types seen, to
     indicate that multiple newline conventions were encountered. For
     files not opened in universal newline read mode the value of this
     attribute will be `None'.

`softspace'
     Boolean that indicates whether a space character needs to be
     printed before another value when using the `print' statement.
     Classes that are trying to simulate a file object should also have
     a writable `softspace' attribute, which should be initialized to
     zero.  This will be automatic for most classes implemented in
     Python (care may be needed for objects that override attribute
     access); types implemented in C will have to provide a writable
     `softspace' attribute.  _Note:_ This attribute is not used to
     control the `print' statement, but to allow the implementation of
     `print' to keep track of its internal state.

---------- Footnotes ----------

(1) `file()' is new in Python 2.2.  The older built-in `open()' is an
alias for `file()'.

(2)  The advantage of leaving the newline on is that returning an empty
string is then an unambiguous `EOF' indication.  It is also possible
(in cases where it might matter, for example, if you want to make an
exact copy of a file while scanning its lines) to tell whether the last
line of a file ended in a newline or not (yes this happens!).


File: python-lib.info,  Node: Other Built-in Types,  Next: Special Attributes,  Prev: File Objects,  Up: Built-in Types

Other Built-in Types
--------------------

The interpreter supports several other kinds of objects.  Most of these
support only one or two operations.

* Menu:

* Modules::
* Classes and Instances::
* Functions::
* Methods::
* Code Objects::
* Type Objects::
* Null Object::
* Ellipsis Object::
* Boolean Values::
* Internal Objects::


File: python-lib.info,  Node: Modules,  Next: Classes and Instances,  Prev: Other Built-in Types,  Up: Other Built-in Types

Modules
.......

The only special operation on a module is attribute access: `M.NAME',
where M is a module and NAME accesses a name defined in M's symbol
table.  Module attributes can be assigned to.  (Note that the `import'
statement is not, strictly speaking, an operation on a module object;
`import FOO' does not require a module object named FOO to exist,
rather it requires an (external) _definition_ for a module named FOO
somewhere.)

A special member of every module is `__dict__'.  This is the dictionary
containing the module's symbol table.  Modifying this dictionary will
actually change the module's symbol table, but direct assignment to the
`__dict__' attribute is not possible (you can write `M.__dict__['a'] =
1', which defines `M.a' to be `1', but you can't write `M.__dict__ =
{}').

Modules built into the interpreter are written like this: `<module
'sys' (built-in)>'.  If loaded from a file, they are written as
`<module 'os' from '/usr/local/lib/python2.3/os.pyc'>'.


File: python-lib.info,  Node: Classes and Instances,  Next: Functions,  Prev: Modules,  Up: Other Built-in Types

Classes and Class Instances
...........................

See chapters 3 and 7 of the  for these.


File: python-lib.info,  Node: Functions,  Next: Methods,  Prev: Classes and Instances,  Up: Other Built-in Types

Functions
.........

Function objects are created by function definitions.  The only
operation on a function object is to call it: `FUNC(ARGUMENT-LIST)'.

There are really two flavors of function objects: built-in functions
and user-defined functions.  Both support the same operation (to call
the function), but the implementation is different, hence the different
object types.

The implementation adds two special read-only attributes: `F.func_code'
is a function's "code object"  (see below) and `F.func_globals' is the
dictionary used as the function's global namespace (this is the same as
`M.__dict__' where M is the module in which the function F was defined).

Function objects also support getting and setting arbitrary attributes,
which can be used, for example, to attach metadata to functions.
Regular attribute dot-notation is used to get and set such attributes.
_Note that the current implementation only supports function attributes
on user-defined functions.  Function attributes on built-in functions
may be supported in the future._

Functions have another special attribute `F.__dict__' (a.k.a.
`F.func_dict') which contains the namespace used to support function
attributes.  `__dict__' and `func_dict' can be accessed directly or set
to a dictionary object.  A function's dictionary cannot be deleted.


File: python-lib.info,  Node: Methods,  Next: Code Objects,  Prev: Functions,  Up: Other Built-in Types

Methods
.......

Methods are functions that are called using the attribute notation.
There are two flavors: built-in methods (such as `append()' on lists)
and class instance methods.  Built-in methods are described with the
types that support them.

The implementation adds two special read-only attributes to class
instance methods: `M.im_self' is the object on which the method
operates, and `M.im_func' is the function implementing the method.
Calling `M(ARG-1, ARG-2, ..., ARG-N)' is completely equivalent to
calling `M.im_func(M.im_self, ARG-1, ARG-2, ..., ARG-N)'.

Class instance methods are either _bound_ or _unbound_, referring to
whether the method was accessed through an instance or a class,
respectively.  When a method is unbound, its `im_self' attribute will
be `None' and if called, an explicit `self' object must be passed as
the first argument.  In this case, `self' must be an instance of the
unbound method's class (or a subclass of that class), otherwise a
`TypeError' is raised.

Like function objects, methods objects support getting arbitrary
attributes.  However, since method attributes are actually stored on
the underlying function object (`meth.im_func'), setting method
attributes on either bound or unbound methods is disallowed.
Attempting to set a method attribute results in a `TypeError' being
raised.  In order to set a method attribute, you need to explicitly set
it on the underlying function object:

     class C:
         def method(self):
             pass
     
     c = C()
     c.method.im_func.whoami = 'my name is c'

See the  for more information.


File: python-lib.info,  Node: Code Objects,  Next: Type Objects,  Prev: Methods,  Up: Other Built-in Types

Code Objects
............

Code objects are used by the implementation to represent
"pseudo-compiled" executable Python code such as a function body.  They
differ from function objects because they don't contain a reference to
their global execution environment.  Code objects are returned by the
built-in `compile()' function and can be extracted from function
objects through their `func_code' attribute.

A code object can be executed or evaluated by passing it (instead of a
source string) to the `exec' statement or the built-in `eval()'
function.

See the  for more information.


File: python-lib.info,  Node: Type Objects,  Next: Null Object,  Prev: Code Objects,  Up: Other Built-in Types

Type Objects
............

Type objects represent the various object types.  An object's type is
accessed by the built-in function `type()'.  There are no special
operations on types.  The standard module `types' defines names for all
standard built-in types.

Types are written like this: `<type 'int'>'.


File: python-lib.info,  Node: Null Object,  Next: Ellipsis Object,  Prev: Type Objects,  Up: Other Built-in Types

The Null Object
...............

This object is returned by functions that don't explicitly return a
value.  It supports no special operations.  There is exactly one null
object, named `None' (a built-in name).

It is written as `None'.


File: python-lib.info,  Node: Ellipsis Object,  Next: Boolean Values,  Prev: Null Object,  Up: Other Built-in Types

The Ellipsis Object
...................

This object is used by extended slice notation (see the ).  It supports
no special operations.  There is exactly one ellipsis object, named
`Ellipsis' (a built-in name).

It is written as `Ellipsis'.


File: python-lib.info,  Node: Boolean Values,  Next: Internal Objects,  Prev: Ellipsis Object,  Up: Other Built-in Types

Boolean Values
..............

Boolean values are the two constant objects `False' and `True'.  They
are used to represent truth values (although other values can also be
considered false or true).  In numeric contexts (for example when used
as the argument to an arithmetic operator), they behave like the
integers 0 and 1, respectively.  The built-in function `bool()' can be
used to cast any value to a Boolean, if the value can be interpreted as
a truth value (see section Truth Value Testing above).

They are written as `False' and `True', respectively.


File: python-lib.info,  Node: Internal Objects,  Prev: Boolean Values,  Up: Other Built-in Types

Internal Objects
................

See the  for this information.  It describes stack frame objects,
traceback objects, and slice objects.


File: python-lib.info,  Node: Special Attributes,  Prev: Other Built-in Types,  Up: Built-in Types

Special Attributes
------------------

The implementation adds a few special read-only attributes to several
object types, where they are relevant:

`__dict__'
     A dictionary or other mapping object used to store an object's
     (writable) attributes.

`__methods__'
     _This is deprecated in Python 2.2.  Use the built-in function
     `dir()' to get a list of an object's attributes.  This attribute
     is no longer available._

`__members__'
     _This is deprecated in Python 2.2.  Use the built-in function
     `dir()' to get a list of an object's attributes.  This attribute
     is no longer available._

`__class__'
     The class to which a class instance belongs.

`__bases__'
     The tuple of base classes of a class object.  If there are no base
     classes, this will be an empty tuple.


File: python-lib.info,  Node: Built-in Exceptions,  Next: Built-in Constants,  Prev: Built-in Types,  Up: Built-In Objects

Built-in Exceptions
===================

Standard exception classes.

Exceptions should be class objects.  The exceptions are defined in the
module `exceptions'.  This module never needs to be imported
explicitly: the exceptions are provided in the built-in namespace as
well as the `exceptions' module.

_Notice:_ In past versions of Python string exceptions were supported.
In Python 1.5 and newer versions, all standard exceptions have been
converted to class objects and users are encouraged to do the same.
String exceptions will raise a `PendingDeprecationWarning'.  In future
versions, support for string exceptions will be removed.

Two distinct string objects with the same value are considered different
exceptions.  This is done to force programmers to use exception names
rather than their string value when specifying exception handlers.  The
string value of all built-in exceptions is their name, but this is not
a requirement for user-defined exceptions or exceptions defined by
library modules.

For class exceptions, in a `try'  statement with an `except'  clause
that mentions a particular class, that clause also handles any
exception classes derived from that class (but not exception classes
from which _it_ is derived).  Two exception classes that are not
related via subclassing are never equivalent, even if they have the
same name.

The built-in exceptions listed below can be generated by the
interpreter or built-in functions.  Except where mentioned, they have
an "associated value" indicating the detailed cause of the error.  This
may be a string or a tuple containing several items of information
(e.g., an error code and a string explaining the code).  The associated
value is the second argument to the `raise'  statement.  For string
exceptions, the associated value itself will be stored in the variable
named as the second argument of the `except' clause (if any).  For class
exceptions, that variable receives the exception instance.  If the
exception class is derived from the standard root class `Exception',
the associated value is present as the exception instance's `args'
attribute, and possibly on other attributes as well.

User code can raise built-in exceptions.  This can be used to test an
exception handler or to report an error condition "just like" the
situation in which the interpreter raises the same exception; but
beware that there is nothing to prevent user code from raising an
inappropriate error.

The built-in exception classes can be sub-classed to define new
exceptions; programmers are encouraged to at least derive new
exceptions from the `Exception' base class.  More information on
defining exceptions is available in the  under the heading
"User-defined Exceptions."

The following exceptions are only used as base classes for other
exceptions.

`Exception'
     The root class for exceptions.  All built-in exceptions are derived
     from this class.  All user-defined exceptions should also be
     derived from this class, but this is not (yet) enforced.  The
     `str()' function, when applied to an instance of this class (or
     most derived classes) returns the string value of the argument or
     arguments, or an empty string if no arguments were given to the
     constructor.  When used as a sequence, this accesses the arguments
     given to the constructor (handy for backward compatibility with
     old code).  The arguments are also available on the instance's
     `args' attribute, as a tuple.

`StandardError'
     The base class for all built-in exceptions except `StopIteration'
     and `SystemExit'.  `StandardError' itself is derived from the root
     class `Exception'.

`ArithmeticError'
     The base class for those built-in exceptions that are raised for
     various arithmetic errors: `OverflowError', `ZeroDivisionError',
     `FloatingPointError'.

`LookupError'
     The base class for the exceptions that are raised when a key or
     index used on a mapping or sequence is invalid: `IndexError',
     `KeyError'.  This can be raised directly by
     `sys.setdefaultencoding()'.

`EnvironmentError'
     The base class for exceptions that can occur outside the Python
     system: `IOError', `OSError'.  When exceptions of this type are
     created with a 2-tuple, the first item is available on the
     instance's `errno' attribute (it is assumed to be an error
     number), and the second item is available on the `strerror'
     attribute (it is usually the associated error message).  The tuple
     itself is also available on the `args' attribute.  _Added in
     Python version 1.5.2_

     When an `EnvironmentError' exception is instantiated with a
     3-tuple, the first two items are available as above, while the
     third item is available on the `filename' attribute.  However, for
     backwards compatibility, the `args' attribute contains only a
     2-tuple of the first two constructor arguments.

     The `filename' attribute is `None' when this exception is created
     with other than 3 arguments.  The `errno' and `strerror'
     attributes are also `None' when the instance was created with
     other than 2 or 3 arguments.  In this last case, `args' contains
     the verbatim constructor arguments as a tuple.

The following exceptions are the exceptions that are actually raised.

`AssertionError'
     Raised when an `assert' statement fails.

`AttributeError'
     Raised when an attribute reference or assignment fails.  (When an
     object does not support attribute references or attribute
     assignments at all, `TypeError' is raised.)

`EOFError'
     Raised when one of the built-in functions (`input()' or
     `raw_input()') hits an end-of-file condition (`EOF') without
     reading any data.  (N.B.: the `read()' and `readline()' methods of
     file objects return an empty string when they hit `EOF'.)

`FloatingPointError'
     Raised when a floating point operation fails.  This exception is
     always defined, but can only be raised when Python is configured
     with the `--with-fpectl' option, or the `WANT_SIGFPE_HANDLER'
     symbol is defined in the `pyconfig.h' file.

`IOError'
     Raised when an I/O operation (such as a `print' statement, the
     built-in `open()' function or a method of a file object) fails for
     an I/O-related reason, e.g., "file not found" or "disk full".

     This class is derived from `EnvironmentError'.  See the discussion
     above for more information on exception instance attributes.

`ImportError'
     Raised when an `import' statement fails to find the module
     definition or when a `from ...import' fails to find a name that is
     to be imported.

`IndexError'
     Raised when a sequence subscript is out of range.  (Slice indices
     are silently truncated to fall in the allowed range; if an index
     is not a plain integer, `TypeError' is raised.)

`KeyError'
     Raised when a mapping (dictionary) key is not found in the set of
     existing keys.

`KeyboardInterrupt'
     Raised when the user hits the interrupt key (normally <Control-C>
     or <Delete>).  During execution, a check for interrupts is made
     regularly.  Interrupts typed when a built-in function `input()' or
     `raw_input()' is waiting for input also raise this exception.

`MemoryError'
     Raised when an operation runs out of memory but the situation may
     still be rescued (by deleting some objects).  The associated value
     is a string indicating what kind of (internal) operation ran out
     of memory.  Note that because of the underlying memory management
     architecture (C's `malloc()' function), the interpreter may not
     always be able to completely recover from this situation; it
     nevertheless raises an exception so that a stack traceback can be
     printed, in case a run-away program was the cause.

`NameError'
     Raised when a local or global name is not found.  This applies only
     to unqualified names.  The associated value is an error message
     that includes the name that could not be found.

`NotImplementedError'
     This exception is derived from `RuntimeError'.  In user defined
     base classes, abstract methods should raise this exception when
     they require derived classes to override the method.  _Added in
     Python version 1.5.2_

`OSError'
     This class is derived from `EnvironmentError' and is used
     primarily as the `os' module's `os.error' exception.  See
     `EnvironmentError' above for a description of the possible
     associated values.  _Added in Python version 1.5.2_

`OverflowError'
     Raised when the result of an arithmetic operation is too large to
     be represented.  This cannot occur for long integers (which would
     rather raise `MemoryError' than give up).  Because of the lack of
     standardization of floating point exception handling in C, most
     floating point operations also aren't checked.  For plain integers,
     all operations that can overflow are checked except left shift,
     where typical applications prefer to drop bits than raise an
     exception.

`ReferenceError'
     This exception is raised when a weak reference proxy, created by
     the ``weakref'.proxy()' function, is used to access an attribute
     of the referent after it has been garbage collected.  For more
     information on weak references, see the `weakref' module.  _Added
     in Python version 2.2_

`RuntimeError'
     Raised when an error is detected that doesn't fall in any of the
     other categories.  The associated value is a string indicating what
     precisely went wrong.  (This exception is mostly a relic from a
     previous version of the interpreter; it is not used very much any
     more.)

`StopIteration'
     Raised by an iterator's `next()' method to signal that there are
     no further values.  This is derived from `Exception' rather than
     `StandardError', since this is not considered an error in its
     normal application.  _Added in Python version 2.2_

`SyntaxError'
     Raised when the parser encounters a syntax error.  This may occur
     in an `import' statement, in an `exec' statement, in a call to the
     built-in function `eval()' or `input()', or when reading the
     initial script or standard input (also interactively).

     Instances of this class have atttributes `filename', `lineno',
     `offset' and `text' for easier access to the details.  `str()' of
     the exception instance returns only the message.

`SystemError'
     Raised when the interpreter finds an internal error, but the
     situation does not look so serious to cause it to abandon all hope.
     The associated value is a string indicating what went wrong (in
     low-level terms).

     You should report this to the author or maintainer of your Python
     interpreter.  Be sure to report the version of the Python
     interpreter (`sys.version'; it is also printed at the start of an
     interactive Python session), the exact error message (the
     exception's associated value) and if possible the source of the
     program that triggered the error.

`SystemExit'
     This exception is raised by the `sys.exit()' function.  When it is
     not handled, the Python interpreter exits; no stack traceback is
     printed.  If the associated value is a plain integer, it specifies
     the system exit status (passed to C's `exit()' function); if it is
     `None', the exit status is zero; if it has another type (such as a
     string), the object's value is printed and the exit status is one.

     Instances have an attribute `code' which is set to the proposed
     exit status or error message (defaulting to `None').  Also, this
     exception derives directly from `Exception' and not
     `StandardError', since it is not technically an error.

     A call to `sys.exit()' is translated into an exception so that
     clean-up handlers (`finally' clauses of `try' statements) can be
     executed, and so that a debugger can execute a script without
     running the risk of losing control.  The `os._exit()' function can
     be used if it is absolutely positively necessary to exit
     immediately (for example, in the child process after a call to
     `fork()').

`TypeError'
     Raised when an operation or function is applied to an object of
     inappropriate type.  The associated value is a string giving
     details about the type mismatch.

`UnboundLocalError'
     Raised when a reference is made to a local variable in a function
     or method, but no value has been bound to that variable.  This is a
     subclass of `NameError'.  _Added in Python version 2.0_

`UnicodeError'
     Raised when a Unicode-related encoding or decoding error occurs.
     It is a subclass of `ValueError'.  _Added in Python version 2.0_

`UnicodeEncodeError'
     Raised when a Unicode-related error occurs during encoding.  It is
     a subclass of `UnicodeError'.  _Added in Python version 2.3_

`UnicodeDecodeError'
     Raised when a Unicode-related error occurs during decoding.  It is
     a subclass of `UnicodeError'.  _Added in Python version 2.3_

`UnicodeTranslateError'
     Raised when a Unicode-related error occurs during translating.  It
     is a subclass of `UnicodeError'.  _Added in Python version 2.3_

`ValueError'
     Raised when a built-in operation or function receives an argument
     that has the right type but an inappropriate value, and the
     situation is not described by a more precise exception such as
     `IndexError'.

`WindowsError'
     Raised when a Windows-specific error occurs or when the error
     number does not correspond to an `errno' value.  The `errno' and
     `strerror' values are created from the return values of the
     `GetLastError()' and `FormatMessage()' functions from the Windows
     Platform API.  This is a subclass of `OSError'.  _Added in Python
     version 2.0_

`ZeroDivisionError'
     Raised when the second argument of a division or modulo operation
     is zero.  The associated value is a string indicating the type of
     the operands and the operation.

The following exceptions are used as warning categories; see the
`warnings' module for more information.

`Warning'
     Base class for warning categories.

`UserWarning'
     Base class for warnings generated by user code.

`DeprecationWarning'
     Base class for warnings about deprecated features.

`PendingDeprecationWarning'
     Base class for warnings about features which will be deprecated in
     the future.

`SyntaxWarning'
     Base class for warnings about dubious syntax

`RuntimeWarning'
     Base class for warnings about dubious runtime behavior.

`FutureWarning'
     Base class for warnings about constructs that will change
     semantically in the future.

The class hierarchy for built-in exceptions is:

         Exception
          +-- SystemExit
          +-- StopIteration
          +-- StandardError
          |    +-- KeyboardInterrupt
          |    +-- ImportError
          |    +-- EnvironmentError
          |    |    +-- IOError
          |    |    +-- OSError
          |    |         +-- WindowsError
          |    +-- EOFError
          |    +-- RuntimeError
          |    |    +-- NotImplementedError
          |    +-- NameError
          |    |    +-- UnboundLocalError
          |    +-- AttributeError
          |    +-- SyntaxError
          |    |    +-- IndentationError
          |    |         +-- TabError
          |    +-- TypeError
          |    +-- AssertionError
          |    +-- LookupError
          |    |    +-- IndexError
          |    |    +-- KeyError
          |    +-- ArithmeticError
          |    |    +-- OverflowError
          |    |    +-- ZeroDivisionError
          |    |    +-- FloatingPointError
          |    +-- ValueError
          |    |    +-- UnicodeError
          |    |        +-- UnicodeEncodeError
          |    |        +-- UnicodeDecodeError
          |    |        +-- UnicodeTranslateError
          |    +-- ReferenceError
          |    +-- SystemError
          |    +-- MemoryError
          +---Warning
     	  +-- UserWarning
     	  +-- DeprecationWarning
     	  +-- PendingDeprecationWarning
     	  +-- SyntaxWarning
     	  +-- OverflowWarning
     	  +-- RuntimeWarning
     	  +-- FutureWarning


File: python-lib.info,  Node: Built-in Constants,  Prev: Built-in Exceptions,  Up: Built-In Objects

Built-in Constants
==================

A small number of constants live in the built-in namespace.  They are:

`False'
     The false value of the `bool' type.  _Added in Python version 2.3_

`True'
     The true value of the `bool' type.  _Added in Python version 2.3_

`None'
     The sole value of ``types'.NoneType'.  `None' is frequently used
     to represent the absence of a value, as when default arguments are
     not passed to a function.

`NotImplemented'
     Special value which can be returned by the "rich comparison"
     special methods (`__eq__()', `__lt__()', and friends), to indicate
     that the comparison is not implemented with respect to the other
     type.

`Ellipsis'
     Special value used in conjunction with extended slicing syntax.


File: python-lib.info,  Node: Python Runtime Services,  Next: String Services,  Prev: Built-In Objects,  Up: Top

Python Runtime Services
***********************

The modules described in this chapter provide a wide range of services
related to the Python interpreter and its interaction with its
environment.  Here's an overview:

* Menu:

* sys::
* gc::
* weakref::
* fpectl::
* atexit::
* types::
* UserDict::
* UserList::
* UserString::
* operator::
* inspect::
* traceback::
* linecache::
* pickle::
* cPickle::
* copy_reg::
* shelve::
* copy::
* marshal::
* warnings::
* imp::
* pkgutil::
* code::
* codeop::
* pprint::
* repr::
* new::
* site::
* user::
* __builtin__::
* __main__::
* __future__::

