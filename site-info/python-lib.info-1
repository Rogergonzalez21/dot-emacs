This is python-lib.info, produced by makeinfo version 4.3 from
python-lib.texi.

October 3, 2003


File: python-lib.info,  Node: Top,  Next: Front Matter,  Prev: (dir),  Up: (dir)

Python Library Reference
************************

* Menu:

* Front Matter::
* Introduction::
* Built-In Objects::
* Python Runtime Services::
* String Services::
* Miscellaneous Services::
* Generic Operating System Services::
* Optional Operating System Services::
* Unix Specific Services::
* Python Debugger::
* Python Profiler::
* Internet Protocols and Support::
* Internet Data Handling::
* Structured Markup Processing Tools::
* Multimedia Services::
* Cryptographic Services::
* Graphical User Interfaces with Tk::
* Restricted Execution::
* Python Language Services::
* Python compiler package::
* SGI IRIX Specific Services::
* SunOS Specific Services::
* MS Windows Specific Services::
* Undocumented Modules::
* Reporting Bugs::
* History and License::
* Module Index::
* Class-Exception-Object Index::
* Function-Method-Variable Index::
* Miscellaneous Index::


File: python-lib.info,  Node: Front Matter,  Next: Introduction,  Prev: Top,  Up: Top

Front Matter
************

Copyright (C) 2001, 2002, 2003 Python Software Foundation.  All rights
reserved.

Copyright (C) 2000 BeOpen.com.  All rights reserved.

Copyright (C) 1995-2000 Corporation for National Research Initiatives.
All rights reserved.

Copyright (C) 1991-1995 Stichting Mathematisch Centrum.  All rights
reserved.

See the end of this document for complete license and permissions
information.

     Python is an extensible, interpreted, object-oriented programming
     language.  It supports a wide range of applications, from simple
     text processing scripts to interactive Web browsers.

     While the describes the exact syntax and semantics of the
     language, it does not describe the standard library that is
     distributed with the language, and which greatly enhances its
     immediate usability.  This library contains built-in modules
     (written in C) that provide access to system functionality such as
     file I/O that would otherwise be inaccessible to Python
     programmers, as well as modules written in Python that provide
     standardized solutions for many problems that occur in everyday
     programming.  Some of these modules are explicitly designed to
     encourage and enhance the portability of Python programs.

     This library reference manual documents Python's standard library,
     as well as many optional library modules (which may or may not be
     available, depending on whether the underlying platform supports
     them and on the configuration choices made at compile time).  It
     also documents the standard types of the language and its built-in
     functions and exceptions, many of which are not or incompletely
     documented in the Reference Manual.

     This manual assumes basic knowledge about the Python language.
     For an informal introduction to Python, see the ; the  remains the
     highest authority on syntactic and semantic questions.  Finally,
     the manual entitled  describes how to add new extensions to Python
     and how to embed it in other applications.



File: python-lib.info,  Node: Introduction,  Next: Built-In Objects,  Prev: Front Matter,  Up: Top

Introduction
************

The "Python library" contains several different kinds of components.

It contains data types that would normally be considered part of the
"core" of a language, such as numbers and lists.  For these types, the
Python language core defines the form of literals and places some
constraints on their semantics, but does not fully define the
semantics.  (On the other hand, the language core does define syntactic
properties like the spelling and priorities of operators.)

The library also contains built-in functions and exceptions -- objects
that can be used by all Python code without the need of an `import'
statement.  Some of these are defined by the core language, but many
are not essential for the core semantics and are only described here.

The bulk of the library, however, consists of a collection of modules.
There are many ways to dissect this collection.  Some modules are
written in C and built in to the Python interpreter; others are written
in Python and imported in source form.  Some modules provide interfaces
that are highly specific to Python, like printing a stack trace; some
provide interfaces that are specific to particular operating systems,
such as access to specific hardware; others provide interfaces that are
specific to a particular application domain, like the World Wide Web.
Some modules are available in all versions and ports of Python; others
are only available when the underlying system supports or requires
them; yet others are available only when a particular configuration
option was chosen at the time when Python was compiled and installed.

This manual is organized "from the inside out:" it first describes the
built-in data types, then the built-in functions and exceptions, and
finally the modules, grouped in chapters of related modules.  The
ordering of the chapters as well as the ordering of the modules within
each chapter is roughly from most relevant to least important.

This means that if you start reading this manual from the start, and
skip to the next chapter when you get bored, you will get a reasonable
overview of the available modules and application areas that are
supported by the Python library.  Of course, you don't _have_ to read
it like a novel -- you can also browse the table of contents (in front
of the manual), or look for a specific function, module or term in the
index (in the back).  And finally, if you enjoy learning about random
subjects, you choose a random page number (see module `random') and
read a section or two.  Regardless of the order in which you read the
sections of this manual, it helps to start with chapter *Note Built-In
Objects::, "Built-in Types, Exceptions and Functions," as the remainder
of the manual assumes familiarity with this material.

Let the show begin!


File: python-lib.info,  Node: Built-In Objects,  Next: Python Runtime Services,  Prev: Introduction,  Up: Top

Built-In Objects
****************

Names for built-in exceptions and functions and a number of constants
are found in a separate symbol table.  This table is searched last when
the interpreter looks up the meaning of a name, so local and global
user-defined names can override built-in names.  Built-in types are
described together here for easy reference.(1)

The tables in this chapter document the priorities of operators by
listing them in order of ascending priority (within a table) and
grouping operators that have the same priority in the same box.  Binary
operators of the same priority group from left to right.  (Unary
operators group from right to left, but there you have no real choice.)
See chapter 5 of the  for the complete picture on operator priorities.

* Menu:

* Built-in Functions::
* Built-in Types::
* Built-in Exceptions::
* Built-in Constants::

---------- Footnotes ----------

(1)  Most descriptions sorely lack explanations of the exceptions that
may be raised -- this will be fixed in a future version of this manual.

