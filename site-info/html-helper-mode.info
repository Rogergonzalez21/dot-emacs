This is html-helper-mode.info, produced by makeinfo version 4.13 from
html-helper-mode.texi.

Html helper mode is an Emacs Lisp major mode for editing HTML files
witten by Nelson Minar.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Html-Helper-Mode: (html-helper-mode). A Html-Helper-Mode for Emacs.
END-INFO-DIR-ENTRY


File: html-helper-mode.info,  Node: Top,  Next: General,  Up: (dir)

Html-Helper-Mode
****************

Html helper mode is an Emacs Lisp major mode for editing HTML files
witten by Nelson Minar.

* Menu:

* General::
* Customization::
* Index::


File: html-helper-mode.info,  Node: General,  Next: Customization,  Prev: Top,  Up: Top

1 General
*********

1.1 Basic functionality: inserting cookies
==========================================

The main function of html-helper-mode is to make it easy to insert HTML
cookies. html-helper-mode does its best to do this consistently and
conveniently. For every HTML and HTML+ cookie there should be a
template which contains the text of the cookie itself and information
as to where the fields are that the user might want to fill in.

   Each template can be activated in one of two ways: by typing the key
sequence for the cookie, or by completing on the beginning of the
cookie.  For example, <kbd>C-cC-bt</kbd> will insert the string
<tt>&lt;title&gt;&lt;/title&gt;</tt>, and position point where you want
to type the title. Or, you could type <tt>&lt;kb</tt> and hit

   <kbd>M-TAB</kbd>, and the tag &lt;kbd&gt;&lt;/kbd&gt; will be
inserted.

   If a command is called with a prefix argument (by pressing
<kbd>C-u</kbd> first), then instead of inserting the cookie at the
point the cookie is inserted around the region. Thus,
<kbd>C-uC-cC-pb</kbd> will wrap the &lt;b&gt;&lt;/b&gt; token around
region, thereby making it bold.

   <!- A separate file contains a <a href="keybindings.html">complete
list of -> <!- keybindings</a>. Be warned, there are a lot - you might
want to -> <!- get used to completion. ->

1.2 Fields
==========

More complicated cookies have several fields that need filling in. For
example, a hyperlink (<tt>&lt;a href=""&gt;&lt;/a&gt;</tt>) has two
fields - the URL and the link description. When a multiple-field cookie
is inserted, point will be placed at the first field and then the other
fields will be entered on a special list. <kbd>M-C-f</kbd> and
<kbd>M-C-b</kbd>

   will make the point skip back and forth on this list.

   html-helper-mode can prompt you in the minibuffer for all of the
fields a cookie need.  For example, you can have it ask you to type in
the URL: and link description fields in a hyperlink.  This feature is
turned off by default - for information on how to turn it on, read
about <a href="hhm-configuring.htm">configuring html-helper-mode</a>.

1.3 Indentation
===============

HTML documents can have nested lists: these are a bit hard to read in
source form. html-helper-mode has code to indent lists cookies to the
appropriate depth depending on how deeply nested the list is. List
cookies are automatically indented when they are inserted. To indent a
line by hand, hit <kbd>TAB</kbd>.

   The indentation code is a bit of a hack - it doesn't really parse the
HTML document very carefully. The main restriction is that cookies that
are parts of lists (for example, <tt>&lt;ul&gt;</tt> or
<tt>&lt;li&gt;</tt>) should appear at the beginning of their lines for
the code to work best.

1.4 New document skeletons
==========================

When a new HTML document is created, html-helper-mode can insert a
skeleton with all the tags every HTML document should have.  This
feature is turned off by default - see the documentation for <a
href="hhm-configuring.htm">configuring html-helper-mode</a> to turn it
on and to customize the skeleton.

1.5 Timestamps
==============

Good HTML documents should all have timestamps stating the last time
they were modified. html-helper-mode can make this easy by
automatically updating your timestamp. This feature is turned off by
default - see the documentation for <a
href="hhm-configuring.htm">configuring html-helper-mode</a> to turn it
on and to customize the timestamp.

1.6 Emacs editing support
=========================

One of the joys of emacs is that it is pretty smart about parsing the
contents of the buffer. However, HTML is fairly outside of the realm of
what emacs thinks is a programming language, so the syntax support
html-helper-mode provides isn't that helpful.  It does define
<kbd>&gt;</kbd> as a match for <kbd>&lt;</kbd>, and emacs knows about
HTML comment syntax, so you can type <kbd>M-;</kbd> to get a comment.

1.7 Highlighting
================

If you have hilit19 loaded in your emacs, then html-helper-mode will
automatically set up regular expressions to colour links, HTML cookies,
included images, and comments. I think this is one of the most useful
features of html-helper-mode. For these patterns to be installed
correctly hilit19 must be loaded <em>before</em> html-helper-mode.

   I do not use font-lock, so currently there are no font-lock patterns
defined. However, there is <a
href="http://www.nbi.dk/TOOLS/emacs/lisp/html-font.el">user-contributed
font-lock code</a> on the net.

1.8 Customize it
================

Once you have html-helper-mode installed, you probably will want to
customize a few things. For more information, see the document on <a
href="hhm-configuring.htm">configuring html-helper-mode</a>.


File: html-helper-mode.info,  Node: Customization,  Next: Index,  Prev: General,  Up: Top

2 Customization
***************

html-helper-mode has several helpful features that are turned off by
default, as well as several variables that the user might want to
change for his or her own use.<p>

   You can configure these variables by adding the appropriate
<tt>setq</tt> forms in your .emacs. You should read your emacs manual
to learn how to do this - in general, you want to use<br>

   <blockquote><tt>(setq &lt;variable name&gt;
&lt;value&gt;)</tt><br></blockquote>

   where &lt;value&gt; is one of <tt>t</tt> or <tt>nil</tt> if it is an
on/off value, or a number or a quoted string. See the

   <a href="#recommended">recommended configuration</a> for examples.<p>

2.1 Features
============

The skeleton and timestamp features are turned off by default because
they modify the buffer. I recommend you turn them on, though, as they
are very useful.<p>

   <dl>   <dt> html-helper-do-write-file-hooks (default nil)   <dd> If
t, html-helper-mode will try to update a timestamp in the document, and
warn the user if it can't.    <dt> html-helper-build-new-buffer
(default nil)   <dd> If t, html-helper-mode will insert a skeleton for
new documents.

   </dl>

   You might also like to have prompting for your forms.<p> <dl>   <dt>
tempo-interactive (default nil)   <dd> If t, the user will be prompted
in the minibuffer for the values of        the fields of cookies </dl>

2.2 Indentation variables
=========================

There are three variables that control indentation:<p>

   <dl>   <dt> html-helper-basic-offset (default 2)   <dd> basic
indentation for list item   <dt> html-helper-item-continue-indent
(default 5)   <dd> text that is part of an item but not in the line
with the item token        are indented this amount. 5 is the length of
"<tt>&lt;li&gt; </tt>"   <dt> html-helper-never-indent (default nil)
<dd> if t, all the fancy indentation code is turned off

   </dl>

2.3 Hooks
=========

Hooks allow your functions to be called at various times within the
inner workings of html-helper-mode. Use <tt>add-hook</tt> instead of
<tt>setq</tt> to modify these variables.<p>

   <dl>   <dt> html-helper-mode-hook (default nil)   <dd> hook run when
html-helper-mode is started   <dt> html-helper-load-hook (default nil)
<dd> hook run when html-helper-mode is loaded   <dt>
html-helper-timestamp-hook (default
html-helper-default-insert-timestamp)   <dd> If
html-helper-do-write-file-hooks is t, then this hook is called
to insert the new timestamp. The default inserts a simple timestamp.
<dt> tempo-insert-string-functions (default nil)   <dd> If set, this
function will be applied to every string before it is        inserted.
For example, setting it to <tt>'upcase</tt> will cause all
strings to be inserted uppercase.

   </dl>

2.4 Strings
===========

There are various strings and templates that html-helper-mode inserts
at appropriate times. Most have useful defaults, but you should set
html-helper-address-string yourself.<p>

   <dl>   <dt> html-helper-address-string (default "")   <dd> Default
author string for each file   <dt> html-helper-new-buffer-template
(default is hairy)   <dd> list of strings and tempo tokens that is
inserted when a new buffer        is created and
html-helper-new-buffer-strings is t   <dt> html-helper-timestamp-start
(default &lt;!- hhmts start -&gt;)   <dd> comment used to delimit the
beginning of a timestamp. Anything        between this and
html-helper-timestamp-end is deleted every time        the file is
written if html-helper-do-write-file-hooks is t   <dt>
html-helper-timestamp-end (default &lt;!- hhmts end -&gt;)   <dd> end
of the timestamp

   </dl>

2.5 Recommended configuration
=============================

</a>

   I suggest you turn on both html-helper-do-write-file-hooks and
html-helper-build-new-buffer, and set html-helper-address-string to the
appropriate value for you. I use this configuration:<p> <pre> (setq
html-helper-do-write-file-hooks t) (setq html-helper-build-new-buffer t)
(setq html-helper-address-string "your email address")

   </pre> </body> </html>


File: html-helper-mode.info,  Node: Index,  Prev: Customization,  Up: Top

Index
*****

 [index ]
* Menu:


Tag Table:
Node: Top321
Node: General570
Node: Customization5440
Node: Index9602

End Tag Table
