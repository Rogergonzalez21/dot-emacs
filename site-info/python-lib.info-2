This is python-lib.info, produced by makeinfo version 4.3 from
python-lib.texi.

October 3, 2003


File: python-lib.info,  Node: Built-in Functions,  Next: Built-in Types,  Prev: Built-In Objects,  Up: Built-In Objects

Built-in Functions
==================

The Python interpreter has a number of functions built into it that are
always available.  They are listed here in alphabetical order.

`__import__(name[, globals[, locals[, fromlist]]])'
     This function is invoked by the `import' statement.  It mainly
     exists so that you can replace it with another function that has a
     compatible interface, in order to change the semantics of the
     `import' statement.  For examples of why and how you would do
     this, see the standard library modules `ihooks'  and `rexec' .
     See also the built-in module `imp' , which defines some useful
     operations out of which you can build your own `__import__()'
     function.

     For example, the statement `import spam' results in the following
     call: `__import__('spam',' `globals(),' `locals(), [])'; the
     statement `from spam.ham import eggs' results in
     `__import__('spam.ham', globals(), locals(), ['eggs'])'.  Note
     that even though `locals()' and `['eggs']' are passed in as
     arguments, the `__import__()' function does not set the local
     variable named `eggs'; this is done by subsequent code that is
     generated for the import statement.  (In fact, the standard
     implementation does not use its LOCALS argument at all, and uses
     its GLOBALS only to determine the package context of the `import'
     statement.)

     When the NAME variable is of the form `package.module', normally,
     the top-level package (the name up till the first dot) is
     returned, _not_ the module named by NAME.  However, when a
     non-empty FROMLIST argument is given, the module named by NAME is
     returned.  This is done for compatibility with the bytecode
     generated for the different kinds of import statement; when using
     `import spam.ham.eggs', the top-level package `spam' must be
     placed in the importing namespace, but when using `from spam.ham
     import eggs', the `spam.ham' subpackage must be used to find the
     `eggs' variable.  As a workaround for this behavior, use
     `getattr()' to extract the desired components.  For example, you
     could define the following helper:

          def my_import(name):
              mod = __import__(name)
              components = name.split('.')
              for comp in components[1:]:
                  mod = getattr(mod, comp)
              return mod

`abs(x)'
     Return the absolute value of a number.  The argument may be a plain
     or long integer or a floating point number.  If the argument is a
     complex number, its magnitude is returned.

`apply(function, args[, keywords])'
     The FUNCTION argument must be a callable object (a user-defined or
     built-in function or method, or a class object) and the ARGS
     argument must be a sequence.  The FUNCTION is called with ARGS as
     the argument list; the number of arguments is the length of the
     tuple.  If the optional KEYWORDS argument is present, it must be a
     dictionary whose keys are strings.  It specifies keyword arguments
     to be added to the end of the argument list.  Calling `apply()' is
     different from just calling `FUNCTION(ARGS)', since in that case
     there is always exactly one argument.  The use of `apply()' is
     equivalent to `FUNCTION(*ARGS, **KEYWORDS)'.  Use of `apply()' is
     not necessary since the "extended call syntax," as used in the
     last example, is completely equivalent.

     _This is deprecated in Python 2.3.  Use the extended call syntax
     instead, as described above._

`basestring()'
     This abstract type is the superclass for `str' and `unicode'.  It
     cannot be called or instantiated, but it can be used to test
     whether an object is an instance of `str' or `unicode'.
     `isinstance(obj, basestring)' is equivalent to `isinstance(obj,
     (str, unicode))'.  _Added in Python version 2.3_

`bool([x])'
     Convert a value to a Boolean, using the standard truth testing
     procedure.  If `x' is false, this returns `False'; otherwise it
     returns `True'.  `bool' is also a class, which is a subclass of
     `int'.  Class `bool' cannot be subclassed further.  Its only
     instances are `False' and `True'.

     _Added in Python version 2.2.1_

     _Changed in Python version 2.3_

`buffer(object[, offset[, size]])'
     The OBJECT argument must be an object that supports the buffer
     call interface (such as strings, arrays, and buffers).  A new
     buffer object will be created which references the OBJECT argument.
     The buffer object will be a slice from the beginning of OBJECT (or
     from the specified OFFSET). The slice will extend to the end of
     OBJECT (or will have a length given by the SIZE argument).

`callable(object)'
     Return true if the OBJECT argument appears callable, false if not.
     If this returns true, it is still possible that a call fails, but
     if it is false, calling OBJECT will never succeed.  Note that
     classes are callable (calling a class returns a new instance);
     class instances are callable if they have a `__call__()' method.

`chr(i)'
     Return a string of one character whose ASCII code is the integer
     I.  For example, `chr(97)' returns the string `'a''.  This is the
     inverse of `ord()'.  The argument must be in the range [0..255],
     inclusive; `ValueError' will be raised if I is outside that range.

`classmethod(function)'
     Return a class method for FUNCTION.

     A class method receives the class as implicit first argument, just
     like an instance method receives the instance.  To declare a class
     method, use this idiom:

          class C:
              def f(cls, arg1, arg2, ...): ...
              f = classmethod(f)

     It can be called either on the class (such as `C.f()') or on an
     instance (such as `C().f()').  The instance is ignored except for
     its class.  If a class method is called for a derived class, the
     derived class object is passed as the implied first argument.

     Class methods are different than C++ or Java static methods.  If
     you want those, see `staticmethod()' in this section.  _Added in
     Python version 2.2_

`cmp(x, y)'
     Compare the two objects X and Y and return an integer according to
     the outcome.  The return value is negative if `X < Y', zero if `X
     == Y' and strictly positive if `X > Y'.

`coerce(x, y)'
     Return a tuple consisting of the two numeric arguments converted to
     a common type, using the same rules as used by arithmetic
     operations.

`compile(string, filename, kind[, flags[, dont_inherit]])'
     Compile the STRING into a code object.  Code objects can be
     executed by an `exec' statement or evaluated by a call to
     `eval()'.  The FILENAME argument should give the file from which
     the code was read; pass some recognizable value if it wasn't read
     from a file (`'<string>'' is commonly used).  The KIND argument
     specifies what kind of code must be compiled; it can be `'exec''
     if STRING consists of a sequence of statements, `'eval'' if it
     consists of a single expression, or `'single'' if it consists of a
     single interactive statement (in the latter case, expression
     statements that evaluate to something else than `None' will
     printed).

     When compiling multi-line statements, two caveats apply: line
     endings must be represented by a single newline character
     (`'\n''), and the input must be terminated by at least one newline
     character.  If line endings are represented by `'\r\n'', use the
     string `replace()' method to change them into `'\n''.

     The optional arguments FLAGS and DONT_INHERIT (which are new in
     Python 2.2) control which future statements (see PEP 236 ) affect
     the compilation of STRING.  If neither is present (or both are
     zero) the code is compiled with those future statements that are
     in effect in the code that is calling compile.  If the FLAGS
     argument is given and DONT_INHERIT is not (or is zero) then the
     future statements specified by the FLAGS argument are used in
     addition to those that would be used anyway.  If DONT_INHERIT is a
     non-zero integer then the FLAGS argument is it - the future
     statements in effect around the call to compile are ignored.

     Future statemants are specified by bits which can be bitwise or-ed
     together to specify multiple statements.  The bitfield required to
     specify a given feature can be found as the `compiler_flag'
     attribute on the `_Feature' instance in the `__future__' module.

`complex([real[, imag]])'
     Create a complex number with the value REAL + IMAG*j or convert a
     string or number to a complex number.  If the first parameter is a
     string, it will be interpreted as a complex number and the
     function must be called without a second parameter.  The second
     parameter can never be a string.  Each argument may be any numeric
     type (including complex).  If IMAG is omitted, it defaults to zero
     and the function serves as a numeric conversion function like
     `int()', `long()' and `float()'.  If both arguments are omitted,
     returns `0j'.

`delattr(object, name)'
     This is a relative of `setattr()'.  The arguments are an object
     and a string.  The string must be the name of one of the object's
     attributes.  The function deletes the named attribute, provided
     the object allows it.  For example, `delattr(X, 'FOOBAR')' is
     equivalent to `del X.FOOBAR'.

`dict([mapping-or-sequence])'
     Return a new dictionary initialized from an optional positional
     argument or from a set of keyword arguments.  If no arguments are
     given, return a new empty dictionary.  If the positional argument
     is a mapping object, return a dictionary mapping the same keys to
     the same values as does the mapping object.  Otherwise the
     positional argument must be a sequence, a container that supports
     iteration, or an iterator object.  The elements of the argument
     must each also be of one of those kinds, and each must in turn
     contain exactly two objects.  The first is used as a key in the
     new dictionary, and the second as the key's value.  If a given key
     is seen more than once, the last value associated with it is
     retained in the new dictionary.

     If keyword arguments are given, the keywords themselves with their
     associated values are added as items to the dictionary. If a key
     is specified both in the positional argument and as a keyword
     argument, the value associated with the keyword is retained in the
     dictionary.  For example, these all return a dictionary equal to
     `{"one": 2, "two": 3}':

        * `dict({'one': 2, 'two': 3})'

        * `dict({'one': 2, 'two': 3}.items())'

        * `dict({'one': 2, 'two': 3}.iteritems())'

        * `dict(zip(('one', 'two'), (2, 3)))'

        * `dict([['two', 3], ['one', 2]])'

        * `dict(one=2, two=3)'

        * `dict([(['one', 'two'][i-2], i) for i in (2, 3)])'

     _Added in Python version 2.2_ _Changed in Python version 2.3_

`dir([object])'
     Without arguments, return the list of names in the current local
     symbol table.  With an argument, attempts to return a list of valid
     attributes for that object.  This information is gleaned from the
     object's `__dict__' attribute, if defined, and from the class or
     type object.  The list is not necessarily complete.  If the object
     is a module object, the list contains the names of the module's
     attributes.  If the object is a type or class object, the list
     contains the names of its attributes, and recursively of the
     attributes of its bases.  Otherwise, the list contains the
     object's attributes' names, the names of its class's attributes,
     and recursively of the attributes of its class's base classes.
     The resulting list is sorted alphabetically.  For example:

          >>> import struct
          >>> dir()
          ['__builtins__', '__doc__', '__name__', 'struct']
          >>> dir(struct)
          ['__doc__', '__name__', 'calcsize', 'error', 'pack', 'unpack']

     _Note:_ Because `dir()' is supplied primarily as a convenience for
     use at an interactive prompt, it tries to supply an interesting
     set of names more than it tries to supply a rigorously or
     consistently defined set of names, and its detailed behavior may
     change across releases.

`divmod(a, b)'
     Take two (non complex) numbers as arguments and return a pair of
     numbers consisting of their quotient and remainder when using long
     division.  With mixed operand types, the rules for binary
     arithmetic operators apply.  For plain and long integers, the
     result is the same as `(A / B, A %{} B)'.  For floating point
     numbers the result is `(Q, A %{} B)', where Q is usually
     `math.floor(A / B)' but may be 1 less than that.  In any case `Q *
     B + A %{} B' is very close to A, if `A %{} B' is non-zero it has
     the same sign as B, and `0 <= abs(A %{} B) < abs(B)'.

     _Changed in Python version 2.3_

`enumerate(iterable)'
     Return an enumerate object. ITERABLE must be a sequence, an
     iterator, or some other object which supports iteration.  The
     `next()' method of the iterator returned by `enumerate()' returns
     a tuple containing a count (from zero) and the corresponding value
     obtained from iterating over ITERABLE.  `enumerate()' is useful
     for obtaining an indexed series: `(0, seq[0])', `(1, seq[1])',
     `(2, seq[2])', ....  _Added in Python version 2.3_

`eval(expression[, globals[, locals]])'
     The arguments are a string and two optional dictionaries.  The
     EXPRESSION argument is parsed and evaluated as a Python expression
     (technically speaking, a condition list) using the GLOBALS and
     LOCALS dictionaries as global and local name space.  If the
     GLOBALS dictionary is present and lacks '__builtins__', the
     current globals are copied into GLOBALS before EXPRESSION is
     parsed.  This means that EXPRESSION normally has full access to
     the standard `__builtin__' module and restricted environments are
     propagated.  If the LOCALS dictionary is omitted it defaults to
     the GLOBALS dictionary.  If both dictionaries are omitted, the
     expression is executed in the environment where `eval' is called.
     The return value is the result of the evaluated expression.
     Syntax errors are reported as exceptions.  Example:

          >>> x = 1
          >>> print eval('x+1')
          2

     This function can also be used to execute arbitrary code objects
     (such as those created by `compile()').  In this case pass a code
     object instead of a string.  The code object must have been
     compiled passing `'eval'' as the KIND argument.

     Hints: dynamic execution of statements is supported by the `exec'
     statement.  Execution of statements from a file is supported by
     the `execfile()' function.  The `globals()' and `locals()'
     functions returns the current global and local dictionary,
     respectively, which may be useful to pass around for use by
     `eval()' or `execfile()'.

`execfile(filename[, globals[, locals]])'
     This function is similar to the `exec' statement, but parses a
     file instead of a string.  It is different from the `import'
     statement in that it does not use the module administration -- it
     reads the file unconditionally and does not create a new module.(1)

     The arguments are a file name and two optional dictionaries.  The
     file is parsed and evaluated as a sequence of Python statements
     (similarly to a module) using the GLOBALS and LOCALS dictionaries
     as global and local namespace.  If the LOCALS dictionary is
     omitted it defaults to the GLOBALS dictionary.  If both
     dictionaries are omitted, the expression is executed in the
     environment where `execfile()' is called.  The return value is
     `None'.

     _The default LOCALS act as described for function `locals()'
     below:  modifications to the default LOCALS dictionary should not
     be attempted.  Pass an explicit LOCALS dictionary if you need to
     see effects of the code on LOCALS after function `execfile()'
     returns.  `execfile()' cannot be used reliably to modify a
     function's locals._

`file(filename[, mode[, bufsize]])'
     Return a new file object (described earlier under Built-in Types).
     The first two arguments are the same as for `stdio''s `fopen()':
     FILENAME is the file name to be opened, MODE indicates how the
     file is to be opened: `'r'' for reading, `'w'' for writing
     (truncating an existing file), and `'a'' opens it for appending
     (which on _some_ UNIX systems means that _all_ writes append to
     the end of the file, regardless of the current seek position).

     Modes `'r+'', `'w+'' and `'a+'' open the file for updating (note
     that `'w+'' truncates the file).  Append `'b'' to the mode to open
     the file in binary mode, on systems that differentiate between
     binary and text files (else it is ignored).  If the file cannot be
     opened, `IOError' is raised.

     In addition to the standard `fopen()' values MODE may be `'U'' or
     `'rU''. If Python is built with universal newline support (the
     default) the file is opened as a text file, but lines may be
     terminated by any of `'\n'', the Unix end-of-line convention,
     `'\r'', the Macintosh convention or `'\r\n'', the Windows
     convention. All of these external representations are seen as
     `'\n'' by the Python program. If Python is built without universal
     newline support MODE `'U'' is the same as normal text mode.  Note
     that file objects so opened also have an attribute called
     `newlines' which has a value of `None' (if no newlines have yet
     been seen), `'\n'', `'\r'', `'\r\n'', or a tuple containing all
     the newline types seen.

     If MODE is omitted, it defaults to `'r''.  When opening a binary
     file, you should append `'b'' to the MODE value for improved
     portability.  (It's useful even on systems which don't treat
     binary and text files differently, where it serves as
     documentation.)  The optional BUFSIZE argument specifies the
     file's desired buffer size: 0 means unbuffered, 1 means line
     buffered, any other positive value means use a buffer of
     (approximately) that size.  A negative BUFSIZE means to use the
     system default, which is usually line buffered for tty devices and
     fully buffered for other files.  If omitted, the system default is
     used.(2)

     The `file()' constructor is new in Python 2.2.  The previous
     spelling, `open()', is retained for compatibility, and is an alias
     for `file()'.

`filter(function, list)'
     Construct a list from those elements of LIST for which FUNCTION
     returns true.  LIST may be either a sequence, a container which
     supports iteration, or an iterator,  If LIST is a string or a
     tuple, the result also has that type; otherwise it is always a
     list.  If FUNCTION is `None', the identity function is assumed,
     that is, all elements of LIST that are false (zero or empty) are
     removed.

     Note that `filter(function, LIST)' is equivalent to `[item for
     item in LIST if function(item)]' if function is not `None' and
     `[item for item in LIST if item]' if function is `None'.

`float([x])'
     Convert a string or a number to floating point.  If the argument
     is a string, it must contain a possibly signed decimal or floating
     point number, possibly embedded in whitespace; this behaves
     identical to `string.atof(X)'.  Otherwise, the argument may be a
     plain or long integer or a floating point number, and a floating
     point number with the same value (within Python's floating point
     precision) is returned.  If no argument is given, returns `0.0'.

     _Note:_ When passing in a string, values for NaN  and Infinity
     may be returned, depending on the underlying C library.  The
     specific set of strings accepted which cause these values to be
     returned depends entirely on the C library and is known to vary.

`getattr(object, name[, default])'
     Return the value of the named attributed of OBJECT.  NAME must be
     a string.  If the string is the name of one of the object's
     attributes, the result is the value of that attribute.  For
     example, `getattr(x, 'foobar')' is equivalent to `x.foobar'.  If
     the named attribute does not exist, DEFAULT is returned if
     provided, otherwise `AttributeError' is raised.

`globals()'
     Return a dictionary representing the current global symbol table.
     This is always the dictionary of the current module (inside a
     function or method, this is the module where it is defined, not the
     module from which it is called).

`hasattr(object, name)'
     The arguments are an object and a string.  The result is 1 if the
     string is the name of one of the object's attributes, 0 if not.
     (This is implemented by calling `getattr(OBJECT, NAME)' and seeing
     whether it raises an exception or not.)

`hash(object)'
     Return the hash value of the object (if it has one).  Hash values
     are integers.  They are used to quickly compare dictionary keys
     during a dictionary lookup.  Numeric values that compare equal
     have the same hash value (even if they are of different types, as
     is the case for 1 and 1.0).

`help([object])'
     Invoke the built-in help system.  (This function is intended for
     interactive use.)  If no argument is given, the interactive help
     system starts on the interpreter console.  If the argument is a
     string, then the string is looked up as the name of a module,
     function, class, method, keyword, or documentation topic, and a
     help page is printed on the console.  If the argument is any other
     kind of object, a help page on the object is generated.  _Added in
     Python version 2.2_

`hex(x)'
     Convert an integer number (of any size) to a hexadecimal string.
     The result is a valid Python expression.  Note: this always yields
     an unsigned literal.  For example, on a 32-bit machine, `hex(-1)'
     yields `'0xffffffff''.  When evaluated on a machine with the same
     word size, this literal is evaluated as -1; at a different word
     size, it may turn up as a large positive number or raise an
     `OverflowError' exception.

`id(object)'
     Return the `identity' of an object.  This is an integer (or long
     integer) which is guaranteed to be unique and constant for this
     object during its lifetime.  Two objects whose lifetimes are
     disjunct may have the same `id()' value.  (Implementation note:
     this is the address of the object.)

`input([prompt])'
     Equivalent to `eval(raw_input(PROMPT))'.  _This function is not
     safe from user errors!  It expects a valid Python expression as
     input; if the input is not syntactically valid, a `SyntaxError'
     will be raised. Other exceptions may be raised if there is an
     error during evaluation.  (On the other hand, sometimes this is
     exactly what you need when writing a quick script for expert use.)_

     If the `readline' module was loaded, then `input()' will use it to
     provide elaborate line editing and history features.

     Consider using the `raw_input()' function for general input from
     users.

`int([x[, radix]])'
     Convert a string or number to a plain integer.  If the argument is
     a string, it must contain a possibly signed decimal number
     representable as a Python integer, possibly embedded in whitespace.
     The RADIX parameter gives the base for the conversion and may be
     any integer in the range [2, 36], or zero.  If RADIX is zero, the
     proper radix is guessed based on the contents of string; the
     interpretation is the same as for integer literals.  If RADIX is
     specified and X is not a string, `TypeError' is raised.
     Otherwise, the argument may be a plain or long integer or a
     floating point number.  Conversion of floating point numbers to
     integers truncates (towards zero).  If the argument is outside the
     integer range a long object will be returned instead.  If no
     arguments are given, returns `0'.

`intern(string)'
     Enter STRING in the table of "interned" strings and return the
     interned string - which is STRING itself or a copy.  Interning
     strings is useful to gain a little performance on dictionary
     lookup - if the keys in a dictionary are interned, and the lookup
     key is interned, the key comparisons (after hashing) can be done
     by a pointer compare instead of a string compare.  Normally, the
     names used in Python programs are automatically interned, and the
     dictionaries used to hold module, class or instance attributes
     have interned keys.  _Changed in Python version 2.3_

`isinstance(object, classinfo)'
     Return true if the OBJECT argument is an instance of the CLASSINFO
     argument, or of a (direct or indirect) subclass thereof.  Also
     return true if CLASSINFO is a type object and OBJECT is an object
     of that type.  If OBJECT is not a class instance or an object of
     the given type, the function always returns false.  If CLASSINFO
     is neither a class object nor a type object, it may be a tuple of
     class or type objects, or may recursively contain other such
     tuples (other sequence types are not accepted).  If CLASSINFO is
     not a class, type, or tuple of classes, types, and such tuples, a
     `TypeError' exception is raised.  _Changed in Python version 2.2_

`issubclass(class, classinfo)'
     Return true if CLASS is a subclass (direct or indirect) of
     CLASSINFO.  A class is considered a subclass of itself.  CLASSINFO
     may be a tuple of class objects, in which case every entry in
     CLASSINFO will be checked. In any other case, a `TypeError'
     exception is raised.  _Changed in Python version 2.3_

`iter(o[, sentinel])'
     Return an iterator object.  The first argument is interpreted very
     differently depending on the presence of the second argument.
     Without a second argument, O must be a collection object which
     supports the iteration protocol (the `__iter__()' method), or it
     must support the sequence protocol (the `__getitem__()' method
     with integer arguments starting at `0').  If it does not support
     either of those protocols, `TypeError' is raised.  If the second
     argument, SENTINEL, is given, then O must be a callable object.
     The iterator created in this case will call O with no arguments
     for each call to its `next()' method; if the value returned is
     equal to SENTINEL, `StopIteration' will be raised, otherwise the
     value will be returned.  _Added in Python version 2.2_

`len(s)'
     Return the length (the number of items) of an object.  The argument
     may be a sequence (string, tuple or list) or a mapping
     (dictionary).

`list([sequence])'
     Return a list whose items are the same and in the same order as
     SEQUENCE's items.  SEQUENCE may be either a sequence, a container
     that supports iteration, or an iterator object.  If SEQUENCE is
     already a list, a copy is made and returned, similar to
     `SEQUENCE[:]'.  For instance, `list('abc')' returns `['a', 'b',
     'c']' and `list( (1, 2, 3) )' returns `[1, 2, 3]'.  If no argument
     is given, returns a new empty list, `[]'.

`locals()'
     Update and return a dictionary representing the current local
     symbol table.  _The contents of this dictionary should not be
     modified; changes may not affect the values of local variables
     used by the interpreter._

`long([x[, radix]])'
     Convert a string or number to a long integer.  If the argument is a
     string, it must contain a possibly signed number of arbitrary
     size, possibly embedded in whitespace; this behaves identical to
     `string.atol(X)'.  The RADIX argument is interpreted in the same
     way as for `int()', and may only be given when X is a string.
     Otherwise, the argument may be a plain or long integer or a
     floating point number, and a long integer with the same value is
     returned.    Conversion of floating point numbers to integers
     truncates (towards zero).  If no arguments are given, returns `0L'.

`map(function, list, ...)'
     Apply FUNCTION to every item of LIST and return a list of the
     results.  If additional LIST arguments are passed, FUNCTION must
     take that many arguments and is applied to the items of all lists
     in parallel; if a list is shorter than another it is assumed to be
     extended with `None' items.  If FUNCTION is `None', the identity
     function is assumed; if there are multiple list arguments, `map()'
     returns a list consisting of tuples containing the corresponding
     items from all lists (a kind of transpose operation).  The LIST
     arguments may be any kind of sequence; the result is always a list.

`max(s[, args...])'
     With a single argument S, return the largest item of a non-empty
     sequence (such as a string, tuple or list).  With more than one
     argument, return the largest of the arguments.

`min(s[, args...])'
     With a single argument S, return the smallest item of a non-empty
     sequence (such as a string, tuple or list).  With more than one
     argument, return the smallest of the arguments.

`object()'
     Return a new featureless object.  `object()' is a base for all new
     style classes.  It has the methods that are common to all
     instances of new style classes.  _Added in Python version 2.2_

     _Changed in Python version 2.3_

`oct(x)'
     Convert an integer number (of any size) to an octal string.  The
     result is a valid Python expression.  Note: this always yields an
     unsigned literal.  For example, on a 32-bit machine, `oct(-1)'
     yields `'037777777777''.  When evaluated on a machine with the
     same word size, this literal is evaluated as -1; at a different
     word size, it may turn up as a large positive number or raise an
     `OverflowError' exception.

`open(filename[, mode[, bufsize]])'
     An alias for the `file()' function above.

`ord(c)'
     Return the ASCII value of a string of one character or a Unicode
     character.  E.g., `ord('a')' returns the integer `97',
     `ord(u'\u2020')' returns `8224'.  This is the inverse of `chr()'
     for strings and of `unichr()' for Unicode characters.

`pow(x, y[, z])'
     Return X to the power Y; if Z is present, return X to the power Y,
     modulo Z (computed more efficiently than `pow(X, Y) % Z').  The
     arguments must have numeric types.  With mixed operand types, the
     coercion rules for binary arithmetic operators apply.  For int and
     long int operands, the result has the same type as the operands
     (after coercion) unless the second argument is negative; in that
     case, all arguments are converted to float and a float result is
     delivered.  For example, `10**2' returns `100', but `10**-2'
     returns `0.01'.  (This last feature was added in Python 2.2.  In
     Python 2.1 and before, if both arguments were of integer types and
     the second argument was negative, an exception was raised.)  If
     the second argument is negative, the third argument must be
     omitted.  If Z is present, X and Y must be of integer types, and Y
     must be non-negative.  (This restriction was added in Python 2.2.
     In Python 2.1 and before, floating 3-argument `pow()' returned
     platform-dependent results depending on floating-point rounding
     accidents.)

`property([fget[, fset[, fdel[, doc]]]])'
     Return a property attribute for new-style classes (classes that
     derive from `object').

     FGET is a function for getting an attribute value, likewise FSET
     is a function for setting, and FDEL a function for del'ing, an
     attribute.  Typical use is to define a managed attribute x:

          class C(object):
              def getx(self): return self.__x
              def setx(self, value): self.__x = value
              def delx(self): del self.__x
              x = property(getx, setx, delx, "I'm the 'x' property.")

     _Added in Python version 2.2_

`range([start,] stop[, step])'
     This is a versatile function to create lists containing arithmetic
     progressions.  It is most often used in `for' loops.  The
     arguments must be plain integers.  If the STEP argument is
     omitted, it defaults to `1'.  If the START argument is omitted, it
     defaults to `0'.  The full form returns a list of plain integers
     `[START, START + STEP, START + 2 * STEP, ...]'.  If STEP is
     positive, the last element is the largest `START + I * STEP' less
     than STOP; if STEP is negative, the last element is the largest
     `START + I * STEP' greater than STOP.  STEP must not be zero (or
     else `ValueError' is raised).  Example:

          >>> range(10)
          [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
          >>> range(1, 11)
          [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
          >>> range(0, 30, 5)
          [0, 5, 10, 15, 20, 25]
          >>> range(0, 10, 3)
          [0, 3, 6, 9]
          >>> range(0, -10, -1)
          [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
          >>> range(0)
          []
          >>> range(1, 0)
          []

`raw_input([prompt])'
     If the PROMPT argument is present, it is written to standard output
     without a trailing newline.  The function then reads a line from
     input, converts it to a string (stripping a trailing newline), and
     returns that.  When `EOF' is read, `EOFError' is raised. Example:

          >>> s = raw_input('--> ')
          --> Monty Python's Flying Circus
          >>> s
          "Monty Python's Flying Circus"

     If the `readline' module was loaded, then `raw_input()' will use
     it to provide elaborate line editing and history features.

`reduce(function, sequence[, initializer])'
     Apply FUNCTION of two arguments cumulatively to the items of
     SEQUENCE, from left to right, so as to reduce the sequence to a
     single value.  For example, `reduce(lambda x, y: x+y, [1, 2, 3, 4,
     5])' calculates `((((1+2)+3)+4)+5)'.  If the optional INITIALIZER
     is present, it is placed before the items of the sequence in the
     calculation, and serves as a default when the sequence is empty.
     If INITIALIZER is not given and SEQUENCE contains only one item,
     the first item is returned.

`reload(module)'
     Re-parse and re-initialize an already imported MODULE.  The
     argument must be a module object, so it must have been successfully
     imported before.  This is useful if you have edited the module
     source file using an external editor and want to try out the new
     version without leaving the Python interpreter.  The return value
     is the module object (the same as the MODULE argument).

     There are a number of caveats:

     If a module is syntactically correct but its initialization fails,
     the first `import' statement for it does not bind its name
     locally, but does store a (partially initialized) module object in
     `sys.modules'.  To reload the module you must first `import' it
     again (this will bind the name to the partially initialized module
     object) before you can `reload()' it.

     When a module is reloaded, its dictionary (containing the module's
     global variables) is retained.  Redefinitions of names will
     override the old definitions, so this is generally not a problem.
     If the new version of a module does not define a name that was
     defined by the old version, the old definition remains.  This
     feature can be used to the module's advantage if it maintains a
     global table or cache of objects -- with a `try' statement it can
     test for the table's presence and skip its initialization if
     desired.

     It is legal though generally not very useful to reload built-in or
     dynamically loaded modules, except for `sys', `__main__' and
     `__builtin__'.  In many cases, however, extension modules are not
     designed to be initialized more than once, and may fail in
     arbitrary ways when reloaded.

     If a module imports objects from another module using `from' ...
     `import' ..., calling `reload()' for the other module does not
     redefine the objects imported from it -- one way around this is to
     re-execute the `from' statement, another is to use `import' and
     qualified names (MODULE.NAME) instead.

     If a module instantiates instances of a class, reloading the module
     that defines the class does not affect the method definitions of
     the instances -- they continue to use the old class definition.
     The same is true for derived classes.

`repr(object)'
     Return a string containing a printable representation of an object.
     This is the same value yielded by conversions (reverse quotes).
     It is sometimes useful to be able to access this operation as an
     ordinary function.  For many types, this function makes an attempt
     to return a string that would yield an object with the same value
     when passed to `eval()'.

`round(x[, n])'
     Return the floating point value X rounded to N digits after the
     decimal point.  If N is omitted, it defaults to zero.  The result
     is a floating point number.  Values are rounded to the closest
     multiple of 10 to the power minus N; if two multiples are equally
     close, rounding is done away from 0 (so. for example, `round(0.5)'
     is `1.0' and `round(-0.5)' is `-1.0').

`setattr(object, name, value)'
     This is the counterpart of `getattr()'.  The arguments are an
     object, a string and an arbitrary value.  The string may name an
     existing attribute or a new attribute.  The function assigns the
     value to the attribute, provided the object allows it.  For
     example, `setattr(X, 'FOOBAR', 123)' is equivalent to `X.FOOBAR =
     123'.

`slice([start,] stop[, step])'
     Return a slice object representing the set of indices specified by
     `range(START, STOP, STEP)'.  The START and STEP arguments default
     to `None'.  Slice objects have read-only data attributes `start',
     `stop' and `step' which merely return the argument values (or their
     default).  They have no other explicit functionality; however they
     are used by Numerical Python  and other third party extensions.
     Slice objects are also generated when extended indexing syntax is
     used.  For example: `a[start:stop:step]' or `a[start:stop, i]'.

`staticmethod(function)'
     Return a static method for FUNCTION.

     A static method does not receive an implicit first argument.  To
     declare a static method, use this idiom:

          class C:
              def f(arg1, arg2, ...): ...
              f = staticmethod(f)

     It can be called either on the class (such as `C.f()') or on an
     instance (such as `C().f()').  The instance is ignored except for
     its class.

     Static methods in Python are similar to those found in Java or C++.
     For a more advanced concept, see `classmethod()' in this section.
     _Added in Python version 2.2_

`sum(sequence[, start])'
     Sums START and the items of a SEQUENCE, from left to right, and
     returns the total.  START defaults to `0'.  The SEQUENCE's items
     are normally numbers, and are not allowed to be strings.  The
     fast, correct way to concatenate sequence of strings is by calling
     `''.join(SEQUENCE)'.  Note that `sum(range(N), M)' is equivalent to
     `reduce(operator.add, range(N), M)' _Added in Python version 2.3_

`super(type[object-or-type])'
     Return the superclass of TYPE.  If the second argument is omitted
     the super object returned is unbound.  If the second argument is an
     object, `isinstance(OBJ, TYPE)' must be true.  If the second
     argument is a type, `issubclass(TYPE2, TYPE)' must be true.
     `super()' only works for new-style classes.

     A typical use for calling a cooperative superclass method is:
          class C(B):
              def meth(self, arg):
                  super(C, self).meth(arg)

     _Added in Python version 2.2_

`str([object])'
     Return a string containing a nicely printable representation of an
     object.  For strings, this returns the string itself.  The
     difference with `repr(OBJECT)' is that `str(OBJECT)' does not
     always attempt to return a string that is acceptable to `eval()';
     its goal is to return a printable string.  If no argument is
     given, returns the empty string, `'''.

`tuple([sequence])'
     Return a tuple whose items are the same and in the same order as
     SEQUENCE's items.  SEQUENCE may be a sequence, a container that
     supports iteration, or an iterator object.  If SEQUENCE is already
     a tuple, it is returned unchanged.  For instance, `tuple('abc')'
     returns `('a', 'b', 'c')' and `tuple([1, 2, 3])' returns `(1, 2,
     3)'.  If no argument is given, returns a new empty tuple, `()'.

`type(object)'
     Return the type of an OBJECT.  The return value is a type  object.
     The standard module `types'  defines names for all built-in types
     that don't already have built-in names.  For instance:

          >>> import types
          >>> x = 'abc'
          >>> if type(x) is str: print "It's a string"
          ...
          It's a string
          >>> def f(): pass
          ...
          >>> if type(f) is types.FunctionType: print "It's a function"
          ...
          It's a function

     The `isinstance()' built-in function is recommended for testing
     the type of an object.

`unichr(i)'
     Return the Unicode string of one character whose Unicode code is
     the integer I.  For example, `unichr(97)' returns the string
     `u'a''.  This is the inverse of `ord()' for Unicode strings.  The
     argument must be in the range [0..65535], inclusive.  `ValueError'
     is raised otherwise.  _Added in Python version 2.0_

`unicode([object[, encoding [, errors]]])'
     Return the Unicode string version of OBJECT using one of the
     following modes:

     If ENCODING and/or ERRORS are given, `unicode()' will decode the
     object which can either be an 8-bit string or a character buffer
     using the codec for ENCODING. The ENCODING parameter is a string
     giving the name of an encoding; if the encoding is not known,
     `LookupError' is raised.  Error handling is done according to
     ERRORS; this specifies the treatment of characters which are
     invalid in the input encoding.  If ERRORS is `'strict'' (the
     default), a `ValueError' is raised on errors, while a value of
     `'ignore'' causes errors to be silently ignored, and a value of
     `'replace'' causes the official Unicode replacement character,
     `U+FFFD', to be used to replace input characters which cannot be
     decoded.  See also the `codecs' module.

     If no optional parameters are given, `unicode()' will mimic the
     behaviour of `str()' except that it returns Unicode strings
     instead of 8-bit strings. More precisely, if OBJECT is a Unicode
     string or subclass it will return that Unicode string without any
     additional decoding applied.

     For objects which provide a `__unicode__()' method, it will call
     this method without arguments to create a Unicode string. For all
     other objects, the 8-bit string version or representation is
     requested and then converted to a Unicode string using the codec
     for the default encoding in `'strict'' mode.

     _Added in Python version 2.0_ _Changed in Python version 2.2_

`vars([object])'
     Without arguments, return a dictionary corresponding to the current
     local symbol table.  With a module, class or class instance object
     as argument (or anything else that has a `__dict__' attribute),
     returns a dictionary corresponding to the object's symbol table.
     The returned dictionary should not be modified: the effects on the
     corresponding symbol table are undefined.(3)

`xrange([start,] stop[, step])'
     This function is very similar to `range()', but returns an "xrange
     object" instead of a list.  This is an opaque sequence type which
     yields the same values as the corresponding list, without actually
     storing them all simultaneously.  The advantage of `xrange()' over
     `range()' is minimal (since `xrange()' still has to create the
     values when asked for them) except when a very large range is used
     on a memory-starved machine or when all of the range's elements
     are never used (such as when the loop is usually terminated with
     `break').

`zip(seq1, ...)'
     This function returns a list of tuples, where the I-th tuple
     contains the I-th element from each of the argument sequences.  At
     least one sequence is required, otherwise a `TypeError' is raised.
     The returned list is truncated in length to the length of the
     shortest argument sequence.  When there are multiple argument
     sequences which are all of the same length, `zip()' is similar to
     `map()' with an initial argument of `None'.  With a single
     sequence argument, it returns a list of 1-tuples.  _Added in
     Python version 2.0_

---------- Footnotes ----------

(1) It is used relatively rarely so does not warrant being made into a
statement.

(2)  Specifying a buffer size currently has no effect on systems that
don't have `setvbuf()'.  The interface to specify the buffer size is
not done using a method that calls `setvbuf()', because that may dump
core when called after any I/O has been performed, and there's no
reliable way to determine whether this is the case.

(3)  In the current implementation, local variable bindings cannot
normally be affected this way, but variables retrieved from other
scopes (such as modules) can be.  This may change.


File: python-lib.info,  Node: Built-in Types,  Next: Built-in Exceptions,  Prev: Built-in Functions,  Up: Built-In Objects

Built-in Types
==============

The following sections describe the standard types that are built into
the interpreter.  Historically, Python's built-in types have differed
from user-defined types because it was not possible to use the built-in
types as the basis for object-oriented inheritance. With the 2.2
release this situation has started to change, although the intended
unification of user-defined and built-in types is as yet far from
complete.

The principal built-in types are numerics, sequences, mappings, files
classes, instances and exceptions.

Some operations are supported by several object types; in particular,
all objects can be compared, tested for truth value, and converted to a
string (with the ``...`' notation).  The latter conversion is
implicitly used when an object is written by the `print'  statement.
(Information on `print' statement and other language statements can be
found in the  and the .)

* Menu:

* Truth Value Testing::
* Boolean Operations::
* Comparisons::
* Numeric Types::
* Iterator Types::
* Sequence Types::
* Mapping Types::
* File Objects::
* Other Built-in Types::
* Special Attributes::


File: python-lib.info,  Node: Truth Value Testing,  Next: Boolean Operations,  Prev: Built-in Types,  Up: Built-in Types

Truth Value Testing
-------------------

Any object can be tested for truth value, for use in an `if' or `while'
condition or as operand of the Boolean operations below.  The following
values are considered false:

   * `None'

   * `False'

   * zero of any numeric type, for example, `0', `0L', `0.0', `0j'.

   * any empty sequence, for example, `''', `()', `[]'.

   * any empty mapping, for example, `{}'.

   * instances of user-defined classes, if the class defines a
     `__nonzero__()' or `__len__()' method, when that method returns
     the integer zero or `bool' value `False'.(1)


All other values are considered true -- so objects of many types are
always true.

Operations and built-in functions that have a Boolean result always
return `0' or `False' for false and `1' or `True' for true, unless
otherwise stated.  (Important exception: the Boolean operations `or'
and `and'  always return one of their operands.)

---------- Footnotes ----------

(1) Additional  information on these special methods may be found in
the .


File: python-lib.info,  Node: Boolean Operations,  Next: Comparisons,  Prev: Truth Value Testing,  Up: Built-in Types

Boolean Operations
------------------

These are the Boolean operations, ordered by ascending priority:

Operation                Result                   Notes
------                   -----                    -----
X or Y                   if X is false, then Y,   (1)
                         else X                   
X and Y                  if X is false, then X,   (1)
                         else Y                   
not X                    if X is false, then      (2)
                         `True', else `False'     

Notes:

`(1)'
     These only evaluate their second argument if needed for their
     outcome.

`(2)'
     `not' has a lower priority than non-Boolean operators, so `not A
     == B' is interpreted as `not (A == B)', and `A == not B' is a
     syntax error.

